[
    {
        "id": "c3fa3eae.3c05c",
        "type": "tab",
        "label": "MeBoost(MeBox)",
        "disabled": false,
        "info": ""
    },
    {
        "id": "1a72b724.e42fd9",
        "type": "tab",
        "label": "通信测试",
        "disabled": false,
        "info": ""
    },
    {
        "id": "5a6aac3a.109e78",
        "type": "tab",
        "label": "update",
        "disabled": false,
        "info": ""
    },
    {
        "id": "2ae44f4a.d51bb",
        "type": "subflow",
        "name": "Pair",
        "info": "",
        "in": [
            {
                "x": 75,
                "y": 188,
                "wires": [
                    {
                        "id": "4cd1d858.b32e28"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 996,
                "y": 320,
                "wires": [
                    {
                        "id": "d85e64b.f27a198",
                        "port": 0
                    }
                ]
            },
            {
                "x": 1000,
                "y": 388,
                "wires": [
                    {
                        "id": "6030d7ad.9fcf28",
                        "port": 0
                    }
                ]
            },
            {
                "x": 1202,
                "y": 227,
                "wires": [
                    {
                        "id": "8a24e01d.75db2",
                        "port": 0
                    }
                ]
            }
        ]
    },
    {
        "id": "dff92ade.2006d8",
        "type": "subflow",
        "name": "updatePairInfo",
        "info": "",
        "in": [
            {
                "x": 134,
                "y": 162,
                "wires": [
                    {
                        "id": "88dc28d1.7723d8"
                    }
                ]
            }
        ],
        "out": []
    },
    {
        "id": "b57bffd1.4a84",
        "type": "subflow",
        "name": "checkPackage",
        "info": "",
        "in": [
            {
                "x": 83,
                "y": 264,
                "wires": [
                    {
                        "id": "28e0035f.d71ffc"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1649,
                "y": 194,
                "wires": [
                    {
                        "id": "46facce2.b90534",
                        "port": 0
                    },
                    {
                        "id": "46facce2.b90534",
                        "port": 3
                    },
                    {
                        "id": "46facce2.b90534",
                        "port": 4
                    },
                    {
                        "id": "46facce2.b90534",
                        "port": 5
                    },
                    {
                        "id": "46facce2.b90534",
                        "port": 6
                    }
                ]
            },
            {
                "x": 1645,
                "y": 319,
                "wires": [
                    {
                        "id": "46facce2.b90534",
                        "port": 1
                    },
                    {
                        "id": "e16b5887.1e94a8",
                        "port": 1
                    }
                ]
            },
            {
                "x": 1641,
                "y": 401,
                "wires": [
                    {
                        "id": "46facce2.b90534",
                        "port": 2
                    },
                    {
                        "id": "e16b5887.1e94a8",
                        "port": 2
                    }
                ]
            }
        ]
    },
    {
        "id": "a32f33f1.5cd0d",
        "type": "subflow",
        "name": "HB",
        "info": "",
        "in": [
            {
                "x": 88,
                "y": 304,
                "wires": [
                    {
                        "id": "1b0dd29d.e4f22d"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1269,
                "y": 233,
                "wires": [
                    {
                        "id": "621bb66c.9de448",
                        "port": 0
                    }
                ]
            },
            {
                "x": 995,
                "y": 485,
                "wires": [
                    {
                        "id": "af3e1946.50c1e8",
                        "port": 0
                    }
                ]
            }
        ]
    },
    {
        "id": "22b837c5.dd47c8",
        "type": "subflow",
        "name": "updateSeq",
        "info": "",
        "in": [
            {
                "x": 152,
                "y": 174,
                "wires": [
                    {
                        "id": "ace299e7.8cf378"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 682,
                "y": 258,
                "wires": [
                    {
                        "id": "ace299e7.8cf378",
                        "port": 0
                    }
                ]
            }
        ]
    },
    {
        "id": "6b946bd1.946b94",
        "type": "subflow",
        "name": "Looper",
        "info": "",
        "in": [
            {
                "x": 145,
                "y": 306,
                "wires": [
                    {
                        "id": "7dff32c3.8200cc"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1070,
                "y": 319,
                "wires": [
                    {
                        "id": "4aa8be2d.b5574",
                        "port": 0
                    }
                ]
            }
        ]
    },
    {
        "id": "d884c6d0.277b38",
        "type": "subflow",
        "name": "readRoute",
        "info": "",
        "in": [
            {
                "x": 103,
                "y": 240,
                "wires": [
                    {
                        "id": "9d015e20.62fea"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 675,
                "y": 218,
                "wires": [
                    {
                        "id": "c58406d2.3a7bf8",
                        "port": 0
                    }
                ]
            }
        ]
    },
    {
        "id": "482099d2.b7df68",
        "type": "subflow",
        "name": "readConfig",
        "info": "",
        "in": [
            {
                "x": 50,
                "y": 30,
                "wires": [
                    {
                        "id": "8a0b267f.75f4d8"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 603,
                "y": 41,
                "wires": [
                    {
                        "id": "8fff6d3c.70009",
                        "port": 0
                    }
                ]
            }
        ]
    },
    {
        "id": "bdc5eaa9.423a18",
        "type": "subflow",
        "name": "setEnv",
        "info": "",
        "in": [
            {
                "x": 148,
                "y": 183,
                "wires": [
                    {
                        "id": "9d58ab72.62a758"
                    },
                    {
                        "id": "e005f621.1ffa08"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1225,
                "y": 273,
                "wires": [
                    {
                        "id": "6bf9d2d8.94062c",
                        "port": 0
                    }
                ]
            }
        ]
    },
    {
        "id": "754e4082.e88e1",
        "type": "subflow",
        "name": "PowerDispatch",
        "info": "",
        "in": [
            {
                "x": 126,
                "y": 148,
                "wires": [
                    {
                        "id": "91218d33.f62c9"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 546,
                "y": 151,
                "wires": [
                    {
                        "id": "91218d33.f62c9",
                        "port": 0
                    }
                ]
            }
        ]
    },
    {
        "id": "52754d49.cf1c24",
        "type": "subflow",
        "name": "lcd(ch12832b)",
        "info": "",
        "in": [
            {
                "x": 207,
                "y": 217,
                "wires": [
                    {
                        "id": "cfbed331.545e5"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 784,
                "y": 205,
                "wires": [
                    {
                        "id": "cfbed331.545e5",
                        "port": 0
                    }
                ]
            }
        ]
    },
    {
        "id": "653df438.cea10c",
        "type": "subflow",
        "name": "ledAndButton",
        "info": "",
        "in": [
            {
                "x": 159,
                "y": 165,
                "wires": [
                    {
                        "id": "46f1a8e3.5b3278"
                    }
                ]
            }
        ],
        "out": []
    },
    {
        "id": "e2804ad0.1d7fb8",
        "type": "serial-port",
        "z": "c3fa3eae.3c05c",
        "serialport": "/dev/ttyAMA0",
        "serialbaud": "9600",
        "databits": "8",
        "parity": "none",
        "stopbits": "1",
        "newline": "500",
        "bin": "bin",
        "out": "time",
        "addchar": false
    },
    {
        "id": "fd3f4246.02c0c",
        "type": "ui_group",
        "z": "c3fa3eae.3c05c",
        "name": "MeBoost(MeBox)",
        "tab": "2d7fd0cb.832bf",
        "order": 2,
        "disp": true,
        "width": "20"
    },
    {
        "id": "2d7fd0cb.832bf",
        "type": "ui_tab",
        "z": "c3fa3eae.3c05c",
        "name": "MeBoost(MeBox)",
        "icon": "dashboard"
    },
    {
        "id": "a0c4e15a.3e8dd",
        "type": "ui_group",
        "z": "",
        "name": "MeBoostSN",
        "tab": "2d7fd0cb.832bf",
        "order": 1,
        "disp": true,
        "width": "6"
    },
    {
        "id": "1b982da1.9ac882",
        "type": "ui_base",
        "theme": {
            "name": "theme-dark",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#0094CE",
                "baseFont": "Helvetica Neue",
                "edited": true,
                "reset": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#097479",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "customTheme": {
                "name": "Untitled Theme 1",
                "default": "#4B7930",
                "baseColor": "#4B7930",
                "baseFont": "Helvetica Neue"
            },
            "themeState": {
                "base-color": {
                    "default": "#097479",
                    "value": "#097479",
                    "edited": false
                },
                "page-titlebar-backgroundColor": {
                    "value": "#097479",
                    "edited": false
                },
                "page-backgroundColor": {
                    "value": "#111111",
                    "edited": false
                },
                "page-sidebar-backgroundColor": {
                    "value": "#000000",
                    "edited": false
                },
                "group-textColor": {
                    "value": "#0eb8c0",
                    "edited": false
                },
                "group-borderColor": {
                    "value": "#555555",
                    "edited": false
                },
                "group-backgroundColor": {
                    "value": "#333333",
                    "edited": false
                },
                "widget-textColor": {
                    "value": "#eeeeee",
                    "edited": false
                },
                "widget-backgroundColor": {
                    "value": "#097479",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#333333",
                    "edited": false
                },
                "base-font": {
                    "value": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
                }
            }
        },
        "site": {
            "name": "MeOcor评估套件",
            "hideToolbar": "false",
            "allowSwipe": "false",
            "dateFormat": "DD/MM/YYYY",
            "sizes": {
                "sx": 48,
                "sy": 48,
                "gx": 6,
                "gy": 6,
                "cx": 6,
                "cy": 6,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "608388ba.758188",
        "type": "ui_tab",
        "z": "",
        "name": "GRF通信测试",
        "icon": "dashboard",
        "order": 2
    },
    {
        "id": "95e82f03.31a25",
        "type": "ui_group",
        "z": "",
        "name": "Default",
        "tab": "608388ba.758188",
        "order": 1,
        "disp": true,
        "width": "6"
    },
    {
        "id": "32b25bfb.21dbfc",
        "type": "mqtt-broker",
        "z": "",
        "broker": "www.microwiz.com.cn",
        "port": "1981",
        "clientid": "",
        "usetls": false,
        "compatmode": true,
        "keepalive": "60",
        "cleansession": true,
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": ""
    },
    {
        "id": "8338b455.7cc748",
        "type": "serial in",
        "z": "c3fa3eae.3c05c",
        "name": "MeBoost(MeBox)",
        "serial": "e2804ad0.1d7fb8",
        "x": 100,
        "y": 262,
        "wires": [
            [
                "d957e3c6.3b682",
                "ddcb6990.100598"
            ]
        ]
    },
    {
        "id": "dd9a3a06.2265c8",
        "type": "serial out",
        "z": "c3fa3eae.3c05c",
        "name": "MeBoost(MeBox)",
        "serial": "e2804ad0.1d7fb8",
        "x": 1497,
        "y": 301,
        "wires": []
    },
    {
        "id": "38000ae0.c7fff6",
        "type": "function",
        "z": "c3fa3eae.3c05c",
        "name": "parsePackage",
        "func": "/**\n * [CONST_FUNC_CODE_INDEX description]\n * @type {Number}\n */\nvar CONST_FUNC_CODE_PAIR = 0x15;\nvar CONST_FUNC_CODE_HB = 0x16;\nvar CONST_FUNC_CODE_GET_RFCT = 0x51;\nvar CONST_FUNC_CODE_SET_RFCT = 0x52;\nvar CONST_FUNC_CODE_QUERY = 0x60;\nvar CONST_FUNC_CODE_SET = 0x61;\nvar CONST_FUNC_CODE_TEST = 0xF0;\nvar CONST_FUNC_CODE_SEARCH = 0xFF;\n/**\n * [CONST_TERMINAL_CODE_RFCT description]\n * @type {[type]}\n */\nvar CONST_TERMINAL_CODE_RFCT = 0x0080;\nvar CONST_TERMINAL_CODE_MEBOOST = 0x00A0;\n\nvar updateData = function(code,msg,index){\n    switch(code){\n        case 0x0001:\n            global.set(\"mode\",msg.payload.data.readUInt16BE(index));\n            break;\n        case 0x0025:\n            global.set(\"Pt\",msg.payload.data.readUInt32BE(index));\n            break;\n        default:\n            break;\n    }\n};\n/**\n * [if description]\n * @param  {[type]} msg.payload.type [description]\n * @return {[type]}                  [description]\n */\nvar allType = context.global.Struct()\n    .word16Ube('code')\n    .word16Ube('len')\n    .word32Ube('Vt')\n    .word32Ube('Ic')\n    .word32Ube('Ft')\n    .word8Ube('Dirt')\n    .word32Ube('Pt')\n    .word8Ube('LN')\n    .word32Ube('ToGrid')\n    .word32Ube('ToUser');\n\nvar SNType = context.global.Struct()\n    .word16Ube('code')\n    .word16Ube('len')\n    .chars('SN', 10, 'hex');\n\nvar enType = context.global.Struct()\n    .word16Ube('code')\n    .word16Ube('len')\n    .word32Ube('en');\n\nvar VtCCType = context.global.Struct()\n    .word16Ube('code')\n    .word16Ube('len')\n    .word32Ube('VtCC');\n\nvar PtCC30Type = context.global.Struct()\n    .word16Ube('code')\n    .word16Ube('len')\n    .word32Ube('PtCC30');\n\nvar PtCC60Type = context.global.Struct()\n    .word16Ube('code')\n    .word16Ube('len')\n    .word32Ube('PtCC60');\n\nvar PtCC80Type = context.global.Struct()\n    .word16Ube('code')\n    .word16Ube('len')\n    .word32Ube('PtCC80');\n\nif (msg.payload.type === 'fail') {\n    return msg;\n}\n\nvar parseRFCTData = function(sendMsg, rawData) {\n    sendMsg.payload.data = [];\n    var codeIndex = 1;\n    var lenIndex = 3;\n    // node.warn(\"length=\"+rawData.length);\n    while (codeIndex < rawData.length) {\n        var code = rawData.readUInt16BE(codeIndex);\n        var len = 0;\n        switch (code) {\n            //all\n            case 0x00:\n                len = rawData.readUInt16BE(lenIndex);\n                allType._setBuff(rawData.slice(codeIndex, codeIndex + len + 4));\n                sendMsg.payload.data.push({\n                    \"code\": \"all\",\n                    \"data\": {\n                        \"Vt\": allType.get(\"Vt\"),\n                        \"Ic\": allType.get(\"Ic\"),\n                        \"Ft\": allType.get(\"Ft\"),\n                        \"Dirt\": allType.get(\"Dirt\"),\n                        \"Pt\": allType.get(\"Pt\"),\n                        \"LN\": allType.get(\"LN\"),\n                        \"ToGrid\": allType.get(\"ToGrid\"),\n                        \"ToUser\": allType.get(\"ToUser\")\n                    }\n                });\n                codeIndex += len + 4;\n                lenIndex += len + 4 + 2;\n                break;\n                //SN\n            case 0x01:\n                len = rawData.readUInt16BE(lenIndex);\n                SNType._setBuff(rawData.slice(codeIndex, codeIndex + len + 4));\n                sendMsg.payload.data.push({\n                    \"code\": \"SN\",\n                    \"data\": SNType.get('SN')\n                });\n                codeIndex += len + 4;\n                lenIndex += len + 4 + 2;\n                break;\n                //energy\n            case 0x03:\n                len = rawData.readUInt16BE(lenIndex);\n                enType._setBuff(rawData.slice(codeIndex, codeIndex + len + 4));\n                sendMsg.payload.data.push({\n                    \"code\": \"en\",\n                    \"data\": SNType.get('en')\n                });\n                codeIndex += len + 4;\n                lenIndex += len + 4 + 2;\n                break;\n                //VtCC\n            case 0x0A:\n                len = rawData.readUInt16BE(lenIndex);\n                VtCCType._setBuff(rawData.slice(codeIndex, codeIndex + len + 4));\n                sendMsg.payload.data.push({\n                    \"code\": \"VtCC\",\n                    \"data\": VtCCType.get('VtCC')\n                });\n                codeIndex += len + 4;\n                lenIndex += len + 4 + 2;\n                break;\n                //PTCC30\n            case 0x0B:\n                len = rawData.readUInt16BE(lenIndex);\n                PtCC30Type._setBuff(rawData.slice(codeIndex, codeIndex + len + 4));\n                sendMsg.payload.data.push({\n                    \"code\": \"PtCC30\",\n                    \"data\": PtCC30Type.get('PtCC30')\n                });\n                codeIndex += len + 4;\n                lenIndex += len + 4 + 2;\n                break;\n                //PtCC60\n            case 0x0C:\n                len = rawData.readUInt16BE(lenIndex);\n                PtCC60Type._setBuff(rawData.slice(codeIndex, codeIndex + len + 4));\n                sendMsg.payload.data.push({\n                    \"code\": \"PtCC60\",\n                    \"data\": PtCC60Type.get('PtCC60')\n                });\n                codeIndex += len + 4;\n                lenIndex += len + 4 + 2;\n                break;\n                // PtCC80\n            case 0x0D:\n                len = rawData.readUInt16BE(lenIndex);\n                PtCC80Type._setBuff(rawData.slice(codeIndex, codeIndex + len + 4));\n                sendMsg.payload.data.push({\n                    \"code\": \"PtCC80\",\n                    \"data\": PtCC80Type.get('PtCC80')\n                });\n                codeIndex += len + 4;\n                lenIndex += len + 4 + 2;\n                break;\n            default:\n                sendMsg.payload.data = {\n                    code: code,\n                    message: \"unknow query code\"\n                };\n                break;\n        }\n    }\n};\n\nvar checkGetConfQueryCode = function(codes) {\n    return ((codes.length !== 0) && context.global._.without(codes, 0x0000, 0x0011, 0x0012, 0x0013, 0x0021, 0x0022, 0x0023,0x0024,0x0025,0x0031,0x0032,0x0033,0x0034,0x0035).length === 0);\n};\n\nvar checkSetConfQueryCode = function(codes) {\n    return ((codes.length !== 0) && context.global._.without(codes, 0x0001, 0x0002,0x0003, 0x0011, 0x0012, 0x0013, 0x0021, 0x0022, 0x0023,0x0024,0x0025,0x0031,0x0032,0x0033,0x0034,0x0035).length === 0);\n};\nvar checkQueryTestCode = function(codes){\n    return ((codes.length !== 0) && context.global._.without(codes, 0xF101, 0xF102,0xF201, 0xF202, 0xF203).length === 0);    \n};\nvar sendMsg = {\n    topic: \"cmd\",\n    payload: {\n        type: null,\n        seq: msg.payload.seq,\n        src: msg.payload.src,\n        dst: msg.payload.dst,\n        funcCode: msg.payload.funcCode,\n        data: null\n    }\n};\nswitch (msg.payload.funcCode) {\n    // pair\n    case CONST_FUNC_CODE_PAIR:\n        var step = msg.payload.data.readUInt8(0);\n        sendMsg.payload.type = step === 0x00 ? 'setPair' : 'exitPair';\n        sendMsg.payload.data = msg.payload.data;\n        break;\n        // hb\n    case CONST_FUNC_CODE_HB:\n        sendMsg.payload.type = 'hbACK';\n        break;\n        // get_rfct\n    case CONST_FUNC_CODE_GET_RFCT:\n        sendMsg.payload.type = 'getRFCTACK';\n        var result = msg.payload.data.readUInt8(0);\n        if (result === 0x00) {\n            parseRFCTData(sendMsg, msg.payload.data);\n        } else {\n            sendMsg.payload.data = {\n                code: result,\n                message: result === 0x01 ? \"get fail.\" : \"query code error.\"\n            };\n        }\n        break;\n        // set_rfct:\n    case CONST_FUNC_CODE_SET_RFCT:\n\n        break;\n        // get conf\n    case CONST_FUNC_CODE_QUERY:\n        var len = msg.payload.dataLen;\n        var i = 0;\n        var codes = [];\n        while (len >= 2) {\n            codes.push(msg.payload.data.readUInt16BE(i));\n            len -= 2;\n            i += 2;\n        }\n        if (checkGetConfQueryCode(codes)) {\n            sendMsg.payload.type = 'query';\n            sendMsg.payload.data = {\n                codes: codes\n            };\n        } else {\n            sendMsg.payload.type = 'fail';\n            sendMsg.payload.data = {\n                code: 2,\n                msg: \"invalid query code!\"\n            };\n        }\n        break;\n        // set conf\n    case CONST_FUNC_CODE_SET:\n        var len = msg.payload.dataLen;\n        var i = 0;\n        var dataLen = 0;\n        var codes = [];\n        while (len > 4) {\n            codes.push(msg.payload.data.readUInt16BE(i));\n            dataLen = msg.payload.data.readUInt16BE(i+2);\n            updateData(msg.payload.data.readUInt16BE(i),msg,i+4);\n            len -= (2+dataLen+2);\n            i += (2+dataLen+2);\n        }\n        if (checkSetConfQueryCode(codes)) {\n            if(codes[0] === 0x0025 && global.get(\"mode\") !== 0x0001){\n                sendMsg.payload.type = 'set_fail';\n                sendMsg.payload.data = {\n                    codes: codes[0],\n                    code: 1,\n                    msg: \"invalid mode!\"\n                };\n            }else{\n                sendMsg.payload.type = 'set';\n                sendMsg.payload.data = {\n                    codes: codes,\n                    raw : msg.payload.data\n                };\n            }\n        } else {\n            sendMsg.payload.type = 'set_fail';\n            sendMsg.payload.data = {\n                codes: codes[0],\n                code: 2,\n                msg: \"invalid query code!\"\n            };\n        }\n        break;\n    case CONST_FUNC_CODE_TEST:\n        var len = msg.payload.dataLen;\n        var i = 0;\n        var codes = [];\n        while (len >= 2) {\n            codes.push(msg.payload.data.readUInt16BE(i));\n            len -= 2;\n            i += 2;\n        }\n        if (checkQueryTestCode(codes)) {\n            sendMsg.payload.type = 'test';\n            sendMsg.payload.data = {\n                codes: codes,\n                raw : msg.payload.data\n            };\n        } else {\n            sendMsg.payload.type = 'fail';\n            sendMsg.payload.data = {\n                code: 2,\n                msg: \"invalid query code!\"\n            };\n        }\n        break;\n    case CONST_FUNC_CODE_SEARCH:\n        sendMsg.payload.type = 'search';\n        break;\n    default:\n        sendMsg.payload.type = 'fail';\n        sendMsg.payload.data = {\n            code: 49,\n            msg: \"invalid function code!\"\n        };\n        break;\n}\nreturn sendMsg;",
        "outputs": 1,
        "noerr": 0,
        "x": 498,
        "y": 148,
        "wires": [
            [
                "5b781360.a487ec",
                "a6f8b66b.fdbf18"
            ]
        ]
    },
    {
        "id": "5b781360.a487ec",
        "type": "switch",
        "z": "c3fa3eae.3c05c",
        "name": "switchPackage",
        "property": "payload.type",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "setPair",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "exitPair",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "hbACK",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "query",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "set",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "set_fail",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "search",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "fail",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "outputs": 9,
        "x": 662,
        "y": 269,
        "wires": [
            [
                "25e08047.da1f8",
                "4c32d615.b3cd28"
            ],
            [
                "9f6a980d.609568"
            ],
            [
                "4e81aa48.b17e54"
            ],
            [
                "eb9158dc.640b58"
            ],
            [
                "26c76491.e42d3c"
            ],
            [
                "bbe7cb.eb306838",
                "ed94419c.df8"
            ],
            [
                "7004d322.d3a3dc"
            ],
            [
                "50b4bc7f.af4b44"
            ],
            []
        ]
    },
    {
        "id": "25e08047.da1f8",
        "type": "function",
        "z": "c3fa3eae.3c05c",
        "name": "setPairACK",
        "func": "var crc = context.global.crc;\nvar HEAD = context.global.Struct()\n    .word8Ube('protocolType', 1, 'hex')\n    .word8Ube('terminalType', 1, 'hex')\n    .word8Ube('seq')\n    .word8Ube('ver')\n    .word16Ube('terminalCode')\n    .chars('src', 10, 'hex')\n    .chars('dst', 10, 'hex')\n    .word8Ube('funcCode')\n    .word16Ube('length');\n\nvar DATA = context.global.Struct()\n    .word8Ube('step')\n    .word16Ube('terminalCode')\n    .word8Ube('fu')\n    .word8Ube('ch')\n    .word8Ube('db');\n    \nvar CRC16 = context.global.Struct()\n    .word16Ube('crc16');\n    \nvar create = function(name) {\n    var buf = name.allocate().buffer();\n    for (var i = 0; i < buf.length; i++) {\n        buf[i] = 0;\n    }\n    return buf;\n};\n\nvar head = create(HEAD);\nHEAD.set('protocolType', 0x52);\nHEAD.set('terminalType', 0x46);\nHEAD.set('seq', msg.payload.seq);\nHEAD.set('ver', 0x01);\nHEAD.set('terminalCode', 0x00B0);\nHEAD.set('src', msg.payload.src);\nHEAD.set('dst', msg.payload.dst);\nHEAD.set('funcCode', msg.payload.funcCode);\nHEAD.set('length', msg.payload.data.length);\n\n\n\nvar ACKData = create(DATA);//msg.payload.data.writeUInt16BE(0x00B0,0);\nDATA.set('step',0x00);\nDATA.set('terminalCode',0x00B0);\nDATA.set('fu',0x01);\nDATA.set('ch',0x01);\nDATA.set('db',0x07);\n\nvar crcData = create(CRC16);\nCRC16.set('crc16', crc.crc16modbus(Buffer.concat([head, ACKData])));\nvar data = Buffer.concat([head, ACKData, crcData]);\nvar sendMsg = {\n    payload: data\n};\nreturn sendMsg;",
        "outputs": 1,
        "noerr": 0,
        "x": 906,
        "y": 175,
        "wires": [
            [
                "dd9a3a06.2265c8",
                "2e916df0.fd6fb2"
            ]
        ]
    },
    {
        "id": "9f6a980d.609568",
        "type": "function",
        "z": "c3fa3eae.3c05c",
        "name": "exitPairACK",
        "func": "var crc = context.global.crc;\n\nvar HEAD = context.global.Struct()\n    .word8Ube('protocolType', 1, 'hex')\n    .word8Ube('terminalType', 1, 'hex')\n    .word8Ube('seq')\n    .word8Ube('ver')\n    .word16Ube('terminalCode')\n    .chars('src', 10, 'hex')\n    .chars('dst', 10, 'hex')\n    .word8Ube('funcCode')\n    .word16Ube('length');\n\nvar ACK = context.global.Struct()\n    .word8Ube('result');\n\nvar CRC16 = context.global.Struct()\n    .word16Ube('crc16');\n\nvar create = function(name) {\n    var buf = name.allocate().buffer();\n    for (var i = 0; i < buf.length; i++) {\n        buf[i] = 0;\n    }\n    return buf;\n};\n\nvar head = create(HEAD);\nHEAD.set('protocolType', 0x52);\nHEAD.set('terminalType', 0x46);\nHEAD.set('seq', msg.payload.seq);\nHEAD.set('ver', 0x01);\nHEAD.set('terminalCode', 0x00B0);\nHEAD.set('src', msg.payload.src);\nHEAD.set('dst', msg.payload.dst);\nHEAD.set('funcCode', msg.payload.funcCode);\nHEAD.set('length', 0x01);\n//\nvar ACKData = create(ACK);\nACK.set('result', 0x30);\n//\nvar crcData = create(CRC16);\nCRC16.set('crc16', crc.crc16modbus(Buffer.concat([head, ACKData])));\nvar data = Buffer.concat([head, ACKData, crcData]);\nvar sendMsg = {\n    payload: data\n};\nreturn sendMsg;",
        "outputs": 1,
        "noerr": 0,
        "x": 902,
        "y": 217,
        "wires": [
            [
                "c98f0ea.f3670f",
                "15bf572.3a8c4a9"
            ]
        ]
    },
    {
        "id": "be2345f0.41dcb8",
        "type": "function",
        "z": "c3fa3eae.3c05c",
        "name": "testRF",
        "func": "msg={payload:'send>>>>>>>>>>> '};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1530,
        "y": 100,
        "wires": [
            [
                "dd9a3a06.2265c8"
            ]
        ]
    },
    {
        "id": "294b6b13.d6b494",
        "type": "ui_button",
        "z": "c3fa3eae.3c05c",
        "name": "Off",
        "group": "fd3f4246.02c0c",
        "order": 7,
        "width": "4",
        "height": "1",
        "label": "Off",
        "color": "",
        "icon": "fa-power-off",
        "payload": "",
        "payloadType": "str",
        "topic": "off",
        "x": 74,
        "y": 758,
        "wires": [
            [
                "28b5bd05.d74a42"
            ]
        ]
    },
    {
        "id": "c65a9eee.39a56",
        "type": "ui_text",
        "z": "c3fa3eae.3c05c",
        "group": "fd3f4246.02c0c",
        "order": 2,
        "width": "20",
        "height": "2",
        "name": "STATUS:  ",
        "label": "",
        "format": "{{msg.payload.status}}",
        "layout": "col-center",
        "x": 1313,
        "y": 698,
        "wires": []
    },
    {
        "id": "909bf085.6f641",
        "type": "ui_button",
        "z": "c3fa3eae.3c05c",
        "name": "Pair",
        "group": "fd3f4246.02c0c",
        "order": 8,
        "width": "4",
        "height": "1",
        "label": "Pair",
        "color": "gray",
        "icon": "fa-share-alt",
        "payload": "{\"pairRepeatTimes\":5}",
        "payloadType": "str",
        "topic": "pair",
        "x": 75,
        "y": 952,
        "wires": [
            [
                "11b505ed.509c0a"
            ]
        ]
    },
    {
        "id": "f9d6f3a7.06291",
        "type": "inject",
        "z": "c3fa3eae.3c05c",
        "name": "init",
        "topic": "",
        "payload": "{\"network\":\"checking...\",\"status\":\"init please wait...\",\"display\":null,\"SN\":\"45123734414d066eff33\"}",
        "payloadType": "json",
        "repeat": "",
        "crontab": "",
        "once": true,
        "x": 492,
        "y": 540.9999847412109,
        "wires": [
            [
                "e000cae5.1fff38",
                "a1f73fd8.5e08c",
                "b01909bd.4fe6f8",
                "c8dda30e.37226",
                "ddbe04a6.36de58"
            ]
        ]
    },
    {
        "id": "c8dda30e.37226",
        "type": "ui_text",
        "z": "c3fa3eae.3c05c",
        "group": "fd3f4246.02c0c",
        "order": 1,
        "width": "0",
        "height": "0",
        "name": "NETWORK:",
        "label": "Network",
        "format": "{{msg.payload.network}}",
        "layout": "",
        "x": 1322,
        "y": 654,
        "wires": []
    },
    {
        "id": "e000cae5.1fff38",
        "type": "ui_text",
        "z": "c3fa3eae.3c05c",
        "group": "fd3f4246.02c0c",
        "order": 3,
        "width": "0",
        "height": "0",
        "name": "Display:",
        "label": "",
        "format": "{{msg.payload.display}}",
        "layout": "col-center",
        "x": 1311.0000305175781,
        "y": 742,
        "wires": []
    },
    {
        "id": "675e8693.98a178",
        "type": "ui_button",
        "z": "c3fa3eae.3c05c",
        "name": "Auto",
        "group": "fd3f4246.02c0c",
        "order": 5,
        "width": "4",
        "height": "1",
        "label": "Auto",
        "color": "",
        "icon": "fa-sun-o",
        "payload": "",
        "payloadType": "str",
        "topic": "auto",
        "x": 73,
        "y": 701,
        "wires": [
            [
                "2dfbe204.d2041e"
            ]
        ]
    },
    {
        "id": "be287e41.41d78",
        "type": "ui_button",
        "z": "c3fa3eae.3c05c",
        "name": "Manual",
        "group": "fd3f4246.02c0c",
        "order": 6,
        "width": "4",
        "height": "1",
        "label": "Manual",
        "color": "",
        "icon": "fa-hand-pointer-o",
        "payload": "{status:Heating for manual.}",
        "payloadType": "str",
        "topic": "manual",
        "x": 72,
        "y": 810,
        "wires": [
            [
                "a85859df.57a7a8"
            ]
        ]
    },
    {
        "id": "be808877.417f78",
        "type": "ui_button",
        "z": "c3fa3eae.3c05c",
        "name": "Display",
        "group": "fd3f4246.02c0c",
        "order": 4,
        "width": "4",
        "height": "1",
        "label": "Display",
        "color": "",
        "icon": "fa-eye",
        "payload": "",
        "payloadType": "str",
        "topic": "",
        "x": 73,
        "y": 876,
        "wires": [
            [
                "80941b81.7f6be8"
            ]
        ]
    },
    {
        "id": "80941b81.7f6be8",
        "type": "function",
        "z": "c3fa3eae.3c05c",
        "name": "rollDisplay",
        "func": "var eol = context.global.os.EOL;\nvar displayContent = [\"Saved Amount\" + eol + \"432.45 Kwh\",\"Saved Today\" + eol + \"11.35 Kwh\",\"Saved Yesterday\" + eol + \"15.22 Kwh\",\"Saved Last Week\" + eol + \"65.88 Kwh\",\"Saved Mouth\" + eol + \"113.45 Kwh\"];\nreturn {payload:{display:displayContent[context.global._.random(0, 4)]}};\n",
        "outputs": 1,
        "noerr": 0,
        "x": 571,
        "y": 876,
        "wires": [
            [
                "e000cae5.1fff38"
            ]
        ]
    },
    {
        "id": "4cd1d858.b32e28",
        "type": "json",
        "z": "2ae44f4a.d51bb",
        "name": "",
        "x": 264,
        "y": 188,
        "wires": [
            [
                "296eada4.d69152"
            ]
        ]
    },
    {
        "id": "296eada4.d69152",
        "type": "function",
        "z": "2ae44f4a.d51bb",
        "name": "setGlobalEnv-PairRepeatTimes",
        "func": "\nglobal.set(\"pairRepeatTimes\",msg.payload.pairRepeatTimes);\nreturn {payload:global.get(\"pairRepeatTimes\")};",
        "outputs": "1",
        "noerr": 0,
        "x": 366,
        "y": 69,
        "wires": [
            [
                "f666f24e.09991"
            ]
        ]
    },
    {
        "id": "f666f24e.09991",
        "type": "function",
        "z": "2ae44f4a.d51bb",
        "name": "sendSetPair",
        "func": "var crc = context.global.crc;\nvar pairRepeatTimes = global.get(\"pairRepeatTimes\");\nglobal.set(\"pairRepeatTimes\",--pairRepeatTimes);\n\nvar HEAD = context.global.Struct()\n    .word8Ube('protocolType', 1, 'hex')\n    .word8Ube('terminalType', 1, 'hex')\n    .word8Ube('seq')\n    .word8Ube('ver')\n    .word16Ube('terminalCode')\n    .chars('src', 10, 'hex')\n    .chars('dst', 10, 'hex')\n    .word8Ube('funcCode')\n    .word16Ube('length');\n\nvar SET_PAIR = context.global.Struct()\n    .word8Ube('step')\n    .word16Ube('terminalCode')\n    .word8Ube('fu')\n    .word8Ube('ch')\n    .word8Ube('dbm');\n\nvar CRC16 = context.global.Struct()\n    .word16Ube('crc16');\n\nvar create = function(name) {\n    var buf = name.allocate().buffer();\n    for (var i = 0; i < buf.length; i++) {\n        buf[i] = 0;\n    }\n    return buf;\n};\n\nvar head = create(HEAD);\nHEAD.set('protocolType', 0x52);\nHEAD.set('terminalType', 0x46);\nHEAD.set('seq', global.get(\"seq\"));\nHEAD.set('ver', 0x01);\nHEAD.set('terminalCode', 0x00B0);\nHEAD.set('src', global.get(\"src\"));\nHEAD.set('dst', \"00000000000000000000\");\nHEAD.set('funcCode', 0x15);\nHEAD.set('length', 0x06);\n//\nvar SET_PAIR_Data = create(SET_PAIR);\nSET_PAIR.set('step', 0x00);\nSET_PAIR.set('terminalCode',0x00A0);\nSET_PAIR.set('fu',0x01);\nSET_PAIR.set('ch',0x01);\nSET_PAIR.set('dbm',0x07);\n//\nvar crcData = create(CRC16);\nCRC16.set('crc16', crc.crc16modbus(Buffer.concat([head, SET_PAIR_Data])));\nvar data = Buffer.concat([head, SET_PAIR_Data, crcData]);\nvar sendMsg = {\n    payload: data\n};\nreturn sendMsg;",
        "outputs": 1,
        "noerr": 0,
        "x": 586,
        "y": 174,
        "wires": [
            [
                "cf39a3f1.30c66"
            ]
        ]
    },
    {
        "id": "cf39a3f1.30c66",
        "type": "delay",
        "z": "2ae44f4a.d51bb",
        "name": "",
        "pauseType": "delay",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "x": 194,
        "y": 326,
        "wires": [
            [
                "e4475688.1bb8a8"
            ]
        ]
    },
    {
        "id": "e4475688.1bb8a8",
        "type": "function",
        "z": "2ae44f4a.d51bb",
        "name": "checkMeetPairLimit",
        "func": "var times = global.get(\"pairRepeatTimes\");\nvar isRecved = global.get(\"recvPairACK\");\nvar isSetPairTip = global.get(\"isSetPairTip\");\n\nif (isRecved && !isSetPairTip) {\n    global.set(\"isSetPairTip\",true);\n    return {\n        payload: {\n            type: 'recved'\n        }\n    };\n}else if(!isRecved && times >= 0){\n    return {\n        payload: {type: 'repeat',data: msg.payload}\n    };\n}else if(isRecved && isSetPairTip){\n    return {\n        payload: {type: 'ignore'}\n    };\n}else{\n    return {\n        payload: {type: 'tips'}\n    };\n}",
        "outputs": 1,
        "noerr": 0,
        "x": 434,
        "y": 324,
        "wires": [
            [
                "b9845a43.467ba8"
            ]
        ]
    },
    {
        "id": "b9845a43.467ba8",
        "type": "switch",
        "z": "2ae44f4a.d51bb",
        "name": "switch",
        "property": "payload.type",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "repeat",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "recved",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "tips",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "ignore",
                "vt": "str"
            }
        ],
        "checkall": "false",
        "outputs": 4,
        "x": 621,
        "y": 324,
        "wires": [
            [
                "ca8d4a08.3572b8",
                "f666f24e.09991"
            ],
            [
                "d85e64b.f27a198"
            ],
            [
                "6030d7ad.9fcf28"
            ],
            []
        ]
    },
    {
        "id": "d85e64b.f27a198",
        "type": "function",
        "z": "2ae44f4a.d51bb",
        "name": "setPairTip",
        "func": "\nreturn {payload:{status:\"pairing...\"}};",
        "outputs": 1,
        "noerr": 0,
        "x": 819,
        "y": 298,
        "wires": [
            []
        ]
    },
    {
        "id": "6030d7ad.9fcf28",
        "type": "function",
        "z": "2ae44f4a.d51bb",
        "name": "tips",
        "func": "return {topic: \"off\",payload:\"please reset MeRFCT then Pair again!\"};",
        "outputs": 1,
        "noerr": 0,
        "x": 795,
        "y": 348,
        "wires": [
            []
        ]
    },
    {
        "id": "88dc28d1.7723d8",
        "type": "function",
        "z": "dff92ade.2006d8",
        "name": "updatePairInfo",
        "func": "global.set(\"src\",msg.payload.src);\nglobal.set(\"dst\",msg.payload.dst);\nreturn {payload:{src:msg.payload.src,dst:msg.payload.dst}};",
        "outputs": 1,
        "noerr": 0,
        "x": 311,
        "y": 161,
        "wires": [
            [
                "1f7b90f2.e0846f"
            ]
        ]
    },
    {
        "id": "1f7b90f2.e0846f",
        "type": "file",
        "z": "dff92ade.2006d8",
        "name": "",
        "filename": "/home/pi/.node-red/etc/route.json",
        "appendNewline": false,
        "createDir": false,
        "overwriteFile": "true",
        "x": 632,
        "y": 162,
        "wires": []
    },
    {
        "id": "4e81aa48.b17e54",
        "type": "function",
        "z": "c3fa3eae.3c05c",
        "name": "sendHBACK",
        "func": "var crc = context.global.crc;\n\nvar HEAD = context.global.Struct()\n    .word8Ube('protocolType', 1, 'hex')\n    .word8Ube('terminalType', 1, 'hex')\n    .word8Ube('seq')\n    .word8Ube('ver')\n    .word16Ube('terminalCode')\n    .chars('src', 10, 'hex')\n    .chars('dst', 10, 'hex')\n    .word8Ube('funcCode')\n    .word16Ube('length');\n\nvar ACK = context.global.Struct()\n    .word8Ube('result');\n\nvar CRC16 = context.global.Struct()\n    .word16Ube('crc16');\n\nvar create = function(name) {\n    var buf = name.allocate().buffer();\n    for (var i = 0; i < buf.length; i++) {\n        buf[i] = 0;\n    }\n    return buf;\n};\n\nvar head = create(HEAD);\nHEAD.set('protocolType', 0x52);\nHEAD.set('terminalType', 0x46);\nHEAD.set('seq', msg.payload.seq);\nHEAD.set('ver', 0x01);\nHEAD.set('terminalCode', 0x00B0);\nHEAD.set('src', msg.payload.src);\nHEAD.set('dst', msg.payload.dst);\nHEAD.set('funcCode', msg.payload.funcCode);\nHEAD.set('length', 0x01);\n//\nvar ACKData = create(ACK);\nACK.set('result', 0x30);\n//\nvar crcData = create(CRC16);\nCRC16.set('crc16', crc.crc16modbus(Buffer.concat([head, ACKData])));\nvar data = Buffer.concat([head, ACKData, crcData]);\nvar sendMsg = {\n    payload: data\n};\nreturn sendMsg;",
        "outputs": 1,
        "noerr": 0,
        "x": 902,
        "y": 259,
        "wires": [
            [
                "dd9a3a06.2265c8",
                "e4c7e0e2.954f1"
            ]
        ]
    },
    {
        "id": "28e0035f.d71ffc",
        "type": "function",
        "z": "b57bffd1.4a84",
        "name": "checkCRC",
        "func": "/**\n * [dataLen description]\n * @type {[type]}\n */\nvar CONST_HEAD_LENGTH = 29;\nvar CONST_CRC_LENGTH = 2;\n/**\n * \n */\nvar CONST_FUNC_CODE_INDEX = 26;\nvar CONST_SRC_INDEX = 6;\nvar CONST_DST_INDEX = 16;\nvar CONST_DATA_LEN_INDEX = 27;\nvar CONST_SEQ_INDEX = 2;\n/**\n * [dataLen description]\n * @type {[type]}\n */\n var sendMsg = {\n        payload: {\n            type: null,\n            seq: null,\n            src: null,\n            dst: null,\n            funcCode: null,\n            data: null\n        }\n    };\nif (msg.payload.length <= 29 || msg.payload[0] !== 0x52 || msg.payload[1] !== 0x46){\n    sendMsg.payload.type = 'invalid';\n    sendMsg.payload.data = {code:255,msg:\"invalid package[unknow], ignore!\"};\n    return sendMsg;\n}\n\nvar dataLen = msg.payload.readUInt16BE(CONST_DATA_LEN_INDEX);\nif (dataLen < 0 || msg.payload.length !== dataLen + CONST_HEAD_LENGTH + CONST_CRC_LENGTH) {\n    sendMsg.payload.type = 'invalid';\n    sendMsg.payload.data = {code:255,msg:\"invalid package[length], ignore!\"};\n    return sendMsg;\n}\nif (context.global.crc.crc16modbus(msg.payload.slice(0, CONST_HEAD_LENGTH + dataLen)).toString(16) === msg.payload.readUInt16BE(CONST_HEAD_LENGTH + dataLen).toString(16)) {\n    sendMsg.topic = \"data\";\n    sendMsg.payload.type = \"success\";\n    sendMsg.payload.data = msg.payload;\n    return sendMsg;\n} else {\n    sendMsg.payload.type = \"fail\";\n    sendMsg.payload.funcCode = msg.payload[CONST_FUNC_CODE_INDEX];\n    sendMsg.payload.seq = msg.payload[CONST_SEQ_INDEX];\n    sendMsg.payload.src = msg.payload.slice(CONST_SRC_INDEX, CONST_SRC_INDEX + 10).toString('hex');\n    sendMsg.payload.dst = msg.payload.slice(CONST_DST_INDEX, CONST_DST_INDEX + 10).toString('hex');\n    sendMsg.payload.data = {\n        code: 50,\n        msg: \"invalid package![crc]\"\n    };\n    return sendMsg;\n}",
        "outputs": 1,
        "noerr": 0,
        "x": 229,
        "y": 262,
        "wires": [
            [
                "e16b5887.1e94a8"
            ]
        ]
    },
    {
        "id": "e16b5887.1e94a8",
        "type": "switch",
        "z": "b57bffd1.4a84",
        "name": "crc",
        "property": "payload.type",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "success",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "fail",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "invalid",
                "vt": "str"
            }
        ],
        "checkall": "false",
        "outputs": 3,
        "x": 421,
        "y": 259,
        "wires": [
            [
                "3419826.fcbe67e"
            ],
            [],
            []
        ]
    },
    {
        "id": "3419826.fcbe67e",
        "type": "function",
        "z": "b57bffd1.4a84",
        "name": "checkRoute",
        "func": "/**\n * [dataLen description]\n * @type {[type]}\n */\nvar CONST_HEAD_LENGTH = 29;\nvar CONST_CRC_LENGTH = 2;\n/**\n *\n */\nvar CONST_FUNC_CODE_INDEX = 26;\nvar CONST_SRC_INDEX = 6;\nvar CONST_DST_INDEX = 16;\nvar CONST_DATA_LEN_INDEX = 27;\nvar CONST_SEQ_INDEX = 2;\nvar CONST_DATA_INDEX = 29;\n/**\n * [dataLen description]\n * @type {[type]}\n */\nvar sendMsg = {\n    payload: {\n        type: null,\n        seq: null,\n        src: null,\n        dst: null,\n        funcCode: null,\n        dataLen: null,\n        data: null\n    }\n};\n\nvar data = msg.payload.data;\nvar route = {src:global.get(\"src\"),dst:global.get(\"dst\")};\nvar funcCode = data[CONST_FUNC_CODE_INDEX];\nvar seq = data[CONST_SEQ_INDEX];\nvar dataLen = data.readUInt16BE(CONST_DATA_LEN_INDEX);\nvar src = data.slice(CONST_SRC_INDEX, CONST_SRC_INDEX + 10).toString('hex');\nvar dst = data.slice(CONST_DST_INDEX, CONST_DST_INDEX + 10).toString('hex');\nvar broadCast = new Buffer(\"30303030303030303030\").toString('hex');\n//console.log(broadCast);\nif(funcCode === 0x15 && route.dst === dst){\n    sendMsg.payload = {\n        type: \"pair\",\n        seq: seq,\n        src: src,\n        dst: dst,\n        funcCode: funcCode,\n        dataLen: dataLen,\n        data: data.slice(CONST_DATA_INDEX, CONST_DATA_INDEX + dataLen)\n    };\n    //return sendMsg;\n}\nelse if(funcCode === 0x15 && dst === \"30303030303030303030\"){\n    sendMsg.payload = {\n        type: \"pair\",\n        seq: seq,\n        src: src,\n        dst: route.dst,\n        funcCode: funcCode,\n        dataLen: dataLen,\n        data: data.slice(CONST_DATA_INDEX, CONST_DATA_INDEX + dataLen)\n    };\n}\nelse if (src === route.src && dst === route.dst) {\n    sendMsg.payload = {\n        type: \"success\",\n        seq: seq,\n        src: src,\n        dst: dst,\n        funcCode: funcCode,\n        dataLen: dataLen,\n        data: data.slice(CONST_DATA_INDEX, CONST_DATA_INDEX + dataLen)\n    };\n    //return sendMsg;\n}else if((funcCode === 0xF0) && dst === route.dst){\n    sendMsg.payload = {\n        type: \"test\",\n        seq: seq,\n        src: src,\n        dst: dst,\n        funcCode: funcCode,\n        dataLen: dataLen,\n        data: data.slice(CONST_DATA_INDEX, CONST_DATA_INDEX + dataLen)\n    };\n}else if(funcCode === 0xFF){\n    sendMsg.payload = {\n        type: \"search\",\n        seq: seq,\n        src: src,\n        dst: dst,\n        funcCode: funcCode,\n        dataLen: dataLen,\n        data: null\n    };\n}\nelse {\n    sendMsg.payload = {\n        type: \"invalid\",\n        seq: seq,\n        src: src,\n        dst: dst,\n        funcCode: funcCode,\n        dataLen: dataLen,\n        data: {\n            code: 255,\n            msg: \"invalid package[route],ignore!\"\n        }\n    };\n    //return sendMsg;\n}\nreturn sendMsg;",
        "outputs": 1,
        "noerr": 0,
        "x": 661,
        "y": 194,
        "wires": [
            [
                "46facce2.b90534"
            ]
        ]
    },
    {
        "id": "46facce2.b90534",
        "type": "switch",
        "z": "b57bffd1.4a84",
        "name": "route",
        "property": "payload.type",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "success",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "fail",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "invalid",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "pair",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "conf",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "test",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "search",
                "vt": "str"
            }
        ],
        "checkall": "false",
        "outputs": 7,
        "x": 900,
        "y": 194,
        "wires": [
            [],
            [],
            [],
            [
                "b6c4afbb.493b5"
            ],
            [],
            [],
            []
        ]
    },
    {
        "id": "dc517e85.23ae8",
        "type": "subflow:b57bffd1.4a84",
        "z": "c3fa3eae.3c05c",
        "name": "",
        "x": 338,
        "y": 267.5,
        "wires": [
            [
                "38000ae0.c7fff6"
            ],
            [
                "5b781360.a487ec"
            ],
            [
                "93411dad.8e506"
            ]
        ]
    },
    {
        "id": "50b4bc7f.af4b44",
        "type": "function",
        "z": "c3fa3eae.3c05c",
        "name": "sendFailACK",
        "func": "var crc = context.global.crc;\n\nvar HEAD = context.global.Struct()\n    .word8Ube('protocolType', 1, 'hex')\n    .word8Ube('terminalType', 1, 'hex')\n    .word8Ube('seq')\n    .word8Ube('ver')\n    .word16Ube('terminalCode')\n    .chars('src', 10, 'hex')\n    .chars('dst', 10, 'hex')\n    .word8Ube('funcCode')\n    .word16Ube('length');\n\nvar ACK = context.global.Struct()\n    .word8Ube('result');\n\nvar CRC16 = context.global.Struct()\n    .word16Ube('crc16');\n\nvar create = function(name) {\n    var buf = name.allocate().buffer();\n    for (var i = 0; i < buf.length; i++) {\n        buf[i] = 0;\n    }\n    return buf;\n};\n\nvar head = create(HEAD);\nHEAD.set('protocolType', 0x52);\nHEAD.set('terminalType', 0x46);\nHEAD.set('seq', msg.payload.seq);\nHEAD.set('ver', 0x01);\nHEAD.set('terminalCode', 0x00B0);\nHEAD.set('src', msg.payload.src);\nHEAD.set('dst', msg.payload.dst);\nHEAD.set('funcCode', msg.payload.funcCode);\nHEAD.set('length', 0x01);\n//\nvar ACKData = create(ACK);\nACK.set('result', msg.payload.data.code);\n//\nvar crcData = create(CRC16);\nCRC16.set('crc16', crc.crc16modbus(Buffer.concat([head, ACKData])));\nvar data = Buffer.concat([head, ACKData, crcData]);\nvar sendMsg = {\n    payload: data\n};\nreturn sendMsg;",
        "outputs": 1,
        "noerr": 0,
        "x": 896,
        "y": 448,
        "wires": [
            [
                "dd9a3a06.2265c8"
            ]
        ]
    },
    {
        "id": "1b0dd29d.e4f22d",
        "type": "function",
        "z": "a32f33f1.5cd0d",
        "name": "checkPair",
        "func": "var src = global.get(\"src\");\nvar dst = global.get(\"dst\");\nvar seq = global.get(\"seq\");\n\nvar sendHB = function(src, dst, seq) {\n    var crc = context.global.crc;\n\n    var HEAD = context.global.Struct()\n        .word8Ube('protocolType', 1, 'hex')\n        .word8Ube('terminalType', 1, 'hex')\n        .word8Ube('seq')\n        .word8Ube('ver')\n        .word16Ube('terminalCode')\n        .chars('src', 10, 'hex')\n        .chars('dst', 10, 'hex')\n        .word8Ube('funcCode')\n        .word16Ube('length');\n\n    var CRC16 = context.global.Struct()\n        .word16Ube('crc16');\n\n    var create = function(name) {\n        var buf = name.allocate().buffer();\n        for (var i = 0; i < buf.length; i++) {\n            buf[i] = 0;\n        }\n        return buf;\n    };\n\n    var head = create(HEAD);\n    HEAD.set('protocolType', 0x52);\n    HEAD.set('terminalType', 0x46);\n    HEAD.set('seq', seq);\n    HEAD.set('ver', 0x01);\n    HEAD.set('terminalCode', 0x00A0)\n    HEAD.set('src', src);\n    HEAD.set('dst', dst);\n    HEAD.set('funcCode', 0x16);\n    HEAD.set('length', 0x00);\n    //\n    var crcData = create(CRC16);\n    CRC16.set('crc16', crc.crc16modbus(head));\n    var data = Buffer.concat([head, crcData]);\n    var sendMsg = {\n        payload: {\n            type: \"send\",\n            data: data\n        }\n    };\n    return sendMsg;\n};\n\nif (dst === null) {\n    return {\n        payload: {\n            type: \"tips\",\n            network: \"disconnected\"\n        }\n    };\n} else {\n    return sendHB(src, dst, seq);\n}",
        "outputs": 1,
        "noerr": 0,
        "x": 406,
        "y": 295,
        "wires": [
            [
                "88d2ef48.772d1"
            ]
        ]
    },
    {
        "id": "88d2ef48.772d1",
        "type": "switch",
        "z": "a32f33f1.5cd0d",
        "name": "",
        "property": "payload.type",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "tips",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "send",
                "vt": "str"
            }
        ],
        "checkall": "false",
        "outputs": 2,
        "x": 873,
        "y": 273,
        "wires": [
            [
                "621bb66c.9de448"
            ],
            [
                "af3e1946.50c1e8"
            ]
        ]
    },
    {
        "id": "621bb66c.9de448",
        "type": "function",
        "z": "a32f33f1.5cd0d",
        "name": "tips",
        "func": "return {payload:{network:msg.payload.network}};",
        "outputs": 1,
        "noerr": 0,
        "x": 1245,
        "y": 356,
        "wires": [
            []
        ]
    },
    {
        "id": "af3e1946.50c1e8",
        "type": "function",
        "z": "a32f33f1.5cd0d",
        "name": "send",
        "func": "return {payload:msg.payload.data};",
        "outputs": 1,
        "noerr": 0,
        "x": 754,
        "y": 382,
        "wires": [
            [
                "11261d73.eed9e3",
                "8b915c9b.746ea"
            ]
        ]
    },
    {
        "id": "4c32d615.b3cd28",
        "type": "subflow:dff92ade.2006d8",
        "z": "c3fa3eae.3c05c",
        "name": "",
        "x": 966.0000915527344,
        "y": 112.00000381469727,
        "wires": []
    },
    {
        "id": "ca8d4a08.3572b8",
        "type": "function",
        "z": "2ae44f4a.d51bb",
        "name": "packSetPairMsg",
        "func": "\nreturn {payload:msg.payload.data};",
        "outputs": 1,
        "noerr": 0,
        "x": 849,
        "y": 237,
        "wires": [
            [
                "1c130630.e3ecfa",
                "8a24e01d.75db2",
                "f77ab496.088548"
            ]
        ]
    },
    {
        "id": "b6c4afbb.493b5",
        "type": "function",
        "z": "b57bffd1.4a84",
        "name": "updateSRC",
        "func": "global.set(\"src\",msg.payload.src);\nreturn {payload:{src:msg.payload.src,dst:msg.payload.dst}};",
        "outputs": 1,
        "noerr": 0,
        "x": 1186,
        "y": 462,
        "wires": [
            [
                "efe3e864.5869c8"
            ]
        ]
    },
    {
        "id": "4f63ae99.b09c5",
        "type": "file",
        "z": "b57bffd1.4a84",
        "name": "",
        "filename": "/home/pi/.node-red/etc/route.json",
        "appendNewline": false,
        "createDir": false,
        "overwriteFile": "true",
        "x": 1782,
        "y": 504,
        "wires": []
    },
    {
        "id": "1c130630.e3ecfa",
        "type": "file in",
        "z": "2ae44f4a.d51bb",
        "name": "",
        "filename": "./etc/route.json",
        "format": "utf8",
        "x": 982,
        "y": 53,
        "wires": [
            [
                "5ccd92a6.a3326c"
            ]
        ]
    },
    {
        "id": "5ccd92a6.a3326c",
        "type": "json",
        "z": "2ae44f4a.d51bb",
        "name": "",
        "x": 1252,
        "y": 49,
        "wires": [
            [
                "f5cf8993.0a3078"
            ]
        ]
    },
    {
        "id": "f5cf8993.0a3078",
        "type": "function",
        "z": "2ae44f4a.d51bb",
        "name": "resetDST",
        "func": "global.set(\"dst\",null);\nreturn {payload:{src:msg.payload.src,dst:null}};",
        "outputs": 1,
        "noerr": 0,
        "x": 1229,
        "y": 137,
        "wires": [
            [
                "52797004.ad869"
            ]
        ]
    },
    {
        "id": "52797004.ad869",
        "type": "file",
        "z": "2ae44f4a.d51bb",
        "name": "",
        "filename": "./etc/route.json",
        "appendNewline": false,
        "createDir": false,
        "overwriteFile": "true",
        "x": 1360,
        "y": 274,
        "wires": []
    },
    {
        "id": "8a24e01d.75db2",
        "type": "subflow:22b837c5.dd47c8",
        "z": "2ae44f4a.d51bb",
        "name": "",
        "x": 1075,
        "y": 228,
        "wires": [
            []
        ]
    },
    {
        "id": "11261d73.eed9e3",
        "type": "subflow:22b837c5.dd47c8",
        "z": "a32f33f1.5cd0d",
        "x": 986,
        "y": 381,
        "wires": [
            []
        ]
    },
    {
        "id": "8b915c9b.746ea",
        "type": "delay",
        "z": "a32f33f1.5cd0d",
        "name": "",
        "pauseType": "delay",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "x": 221,
        "y": 574,
        "wires": [
            [
                "a5dd73ee.5a229"
            ]
        ]
    },
    {
        "id": "a5dd73ee.5a229",
        "type": "function",
        "z": "a32f33f1.5cd0d",
        "name": "checkHB",
        "func": "return {payload:global.get(\"hb\")};",
        "outputs": 1,
        "noerr": 0,
        "x": 391,
        "y": 575,
        "wires": [
            [
                "d95ba0db.26a46"
            ]
        ]
    },
    {
        "id": "d95ba0db.26a46",
        "type": "switch",
        "z": "a32f33f1.5cd0d",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "false"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 573,
        "y": 573,
        "wires": [
            [
                "74bb6b38.8b4494"
            ],
            [
                "6b769d75.948964"
            ]
        ]
    },
    {
        "id": "74bb6b38.8b4494",
        "type": "function",
        "z": "a32f33f1.5cd0d",
        "name": "checkHBRetry",
        "func": "var retry = global.get(\"networkRetry\") - 1;\nglobal.set(\"networkRetry\",retry);\nreturn {payload:retry};",
        "outputs": 1,
        "noerr": 0,
        "x": 777,
        "y": 572,
        "wires": [
            [
                "8626d4b5.79d928"
            ]
        ]
    },
    {
        "id": "8626d4b5.79d928",
        "type": "switch",
        "z": "a32f33f1.5cd0d",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "gte",
                "v": "0",
                "vt": "num"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 938,
        "y": 576,
        "wires": [
            [
                "1b0dd29d.e4f22d"
            ],
            [
                "621bb66c.9de448"
            ]
        ]
    },
    {
        "id": "6b769d75.948964",
        "type": "delay",
        "z": "a32f33f1.5cd0d",
        "name": "",
        "pauseType": "delay",
        "timeout": "3",
        "timeoutUnits": "minutes",
        "rate": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "x": 595,
        "y": 507,
        "wires": [
            [
                "1b0dd29d.e4f22d"
            ]
        ]
    },
    {
        "id": "4aa8be2d.b5574",
        "type": "function",
        "z": "6b946bd1.946b94",
        "name": "sendGetRFCT",
        "func": "var CONST_FUNC_CODE_HB = 0x16;\nvar CONST_FUNC_CODE_GET_RFCT = 0x51;\n\nvar crc = context.global.crc;\n\nvar HEAD = context.global.Struct()\n    .word8Ube('protocolType', 1, 'hex')\n    .word8Ube('terminalType', 1, 'hex')\n    .word8Ube('seq')\n    .word8Ube('ver')\n    .word16Ube('terminalCode')\n    .chars('src', 10, 'hex')\n    .chars('dst', 10, 'hex')\n    .word8Ube('funcCode')\n    .word16Ube('length');\n\nvar GET_RFCT = context.global.Struct()\n    .word16Ube('code');\n\nvar CRC16 = context.global.Struct()\n    .word16Ube('crc16');\n\nvar create = function(name) {\n    var buf = name.allocate().buffer();\n    for (var i = 0; i < buf.length; i++) {\n        buf[i] = 0;\n    }\n    return buf;\n};\n\nvar head = create(HEAD);\nHEAD.set('protocolType', 0x52);\nHEAD.set('terminalType', 0x46);\nHEAD.set('seq', global.get(\"seq\"));\nHEAD.set('ver', 0x01);\nHEAD.set('terminalCode', 0x00A0);\nHEAD.set('src', global.get(\"src\"));\nHEAD.set('dst', global.get(\"dst\"));\nHEAD.set('funcCode', CONST_FUNC_CODE_GET_RFCT);\nHEAD.set('length', 0x02);\n//\nvar getRFCTData = create(GET_RFCT);\nGET_RFCT.set('code', 0x0000);\n\nvar crcData = create(CRC16);\nCRC16.set('crc16', crc.crc16modbus(Buffer.concat([head,getRFCTData])));\nvar data = Buffer.concat([head, getRFCTData,crcData]);\nvar sendMsg = {\n    payload: data\n};\nreturn sendMsg;",
        "outputs": 1,
        "noerr": 0,
        "x": 873,
        "y": 306,
        "wires": [
            []
        ]
    },
    {
        "id": "a85859df.57a7a8",
        "type": "function",
        "z": "c3fa3eae.3c05c",
        "name": "tipManual",
        "func": "global.set(\"mode\",0x0002);\n//global.set(\"Pt\",30000);\nglobal.set(\"currentPower\",3000);\nreturn {payload:{status: \"Heating by MAN\" + context.global.os.EOL + \"for 3.0 kw\"}};",
        "outputs": 1,
        "noerr": 0,
        "x": 365,
        "y": 815,
        "wires": [
            [
                "c65a9eee.39a56"
            ]
        ]
    },
    {
        "id": "c98f0ea.f3670f",
        "type": "function",
        "z": "c3fa3eae.3c05c",
        "name": "setAuto",
        "func": "global.set(\"mode\",0x0001);\nreturn msg;",
        "outputs": "1",
        "noerr": 0,
        "x": 1087,
        "y": 241,
        "wires": [
            [
                "dd9a3a06.2265c8"
            ]
        ]
    },
    {
        "id": "4b19b766.b4e648",
        "type": "switch",
        "z": "6b946bd1.946b94",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "auto",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "off-auto",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "init",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "outputs": 4,
        "x": 532,
        "y": 301,
        "wires": [
            [
                "4aa8be2d.b5574"
            ],
            [
                "4aa8be2d.b5574"
            ],
            [
                "4aa8be2d.b5574"
            ],
            []
        ]
    },
    {
        "id": "7dff32c3.8200cc",
        "type": "function",
        "z": "6b946bd1.946b94",
        "name": "checkMode",
        "func": "return {payload:global.get(\"mode\")};",
        "outputs": 1,
        "noerr": 0,
        "x": 363,
        "y": 301,
        "wires": [
            [
                "4b19b766.b4e648"
            ]
        ]
    },
    {
        "id": "28b5bd05.d74a42",
        "type": "function",
        "z": "c3fa3eae.3c05c",
        "name": "tipOff",
        "func": "global.set(\"mode\",0x0004);\n//global.set(\"Pt\",0);\nglobal.set(\"currentPower\",0);\nreturn {payload:{status:\"Heating OFF by\" + context.global.os.EOL + \"Manual\"}};",
        "outputs": 1,
        "noerr": 0,
        "x": 390,
        "y": 761,
        "wires": [
            [
                "c65a9eee.39a56"
            ]
        ]
    },
    {
        "id": "2dfbe204.d2041e",
        "type": "function",
        "z": "c3fa3eae.3c05c",
        "name": "tipAuto",
        "func": "global.set(\"mode\",0x0001);\nreturn {payload:{status:\"Heating by Solar\" + context.global.os.EOL + \"for \" + (global.get(\"Pt\")/10000).toFixed(1) +\" kw\"}};",
        "outputs": 1,
        "noerr": 0,
        "x": 423,
        "y": 678,
        "wires": [
            [
                "c65a9eee.39a56"
            ]
        ]
    },
    {
        "id": "9d015e20.62fea",
        "type": "file in",
        "z": "d884c6d0.277b38",
        "name": "",
        "filename": "/home/pi/.node-red/etc/route.json",
        "format": "utf8",
        "sendError": true,
        "x": 392,
        "y": 231,
        "wires": [
            [
                "c58406d2.3a7bf8"
            ]
        ]
    },
    {
        "id": "c58406d2.3a7bf8",
        "type": "json",
        "z": "d884c6d0.277b38",
        "name": "",
        "x": 562,
        "y": 128,
        "wires": [
            []
        ]
    },
    {
        "id": "5d9a34aa.a265cc",
        "type": "delay",
        "z": "c3fa3eae.3c05c",
        "name": "waitInitFinished",
        "pauseType": "delay",
        "timeout": "2",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "x": 770,
        "y": 532.9999847412109,
        "wires": [
            [
                "2dfbe204.d2041e"
            ]
        ]
    },
    {
        "id": "f77ab496.088548",
        "type": "debug",
        "z": "2ae44f4a.d51bb",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "false",
        "x": 1252,
        "y": 374,
        "wires": []
    },
    {
        "id": "8a0b267f.75f4d8",
        "type": "file in",
        "z": "482099d2.b7df68",
        "name": "",
        "filename": "/home/pi/.node-red/etc/config.json",
        "format": "utf8",
        "sendError": true,
        "x": 300,
        "y": 60,
        "wires": [
            [
                "8fff6d3c.70009"
            ]
        ]
    },
    {
        "id": "8fff6d3c.70009",
        "type": "json",
        "z": "482099d2.b7df68",
        "name": "",
        "x": 470,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "9d58ab72.62a758",
        "type": "subflow:d884c6d0.277b38",
        "z": "bdc5eaa9.423a18",
        "name": "",
        "x": 484,
        "y": 145,
        "wires": [
            [
                "15398ae.feac675"
            ]
        ]
    },
    {
        "id": "e005f621.1ffa08",
        "type": "subflow:482099d2.b7df68",
        "z": "bdc5eaa9.423a18",
        "name": "",
        "x": 480,
        "y": 210,
        "wires": [
            [
                "15398ae.feac675"
            ]
        ]
    },
    {
        "id": "15398ae.feac675",
        "type": "join",
        "z": "bdc5eaa9.423a18",
        "name": "",
        "mode": "custom",
        "build": "merged",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "timeout": "",
        "count": "2",
        "x": 787,
        "y": 174,
        "wires": [
            [
                "7ba2001f.845e"
            ]
        ]
    },
    {
        "id": "7ba2001f.845e",
        "type": "function",
        "z": "bdc5eaa9.423a18",
        "name": "setGlobalEnv",
        "func": "context.global._.forEach(msg.payload,function(value,key){\n    global.set(key.toString(),value);\n});\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 948,
        "y": 172,
        "wires": [
            [
                "6bf9d2d8.94062c"
            ]
        ]
    },
    {
        "id": "6bf9d2d8.94062c",
        "type": "function",
        "z": "bdc5eaa9.423a18",
        "name": "initEnv",
        "func": "global.set(\"recvPairACK\",false);\nglobal.set(\"isSetPairTip\",false);\nglobal.set(\"seq\",1);\nglobal.set(\"hb\",false);\nglobal.set(\"currentPower\",0);\nglobal.set(\"data\",[]);\n//\nglobal.set(\"mode\",0x0001);\nglobal.set(\"Pt\",30000);\nglobal.set(\"Vt\",2200);\nglobal.set(\"Saved\",1789);\nglobal.set(\"Used\",2789);\nreturn msg;",
        "outputs": "1",
        "noerr": 0,
        "x": 1119,
        "y": 177,
        "wires": [
            []
        ]
    },
    {
        "id": "b01909bd.4fe6f8",
        "type": "subflow:bdc5eaa9.423a18",
        "z": "c3fa3eae.3c05c",
        "name": "",
        "x": 660,
        "y": 486.99998474121094,
        "wires": [
            [
                "5d9a34aa.a265cc"
            ]
        ]
    },
    {
        "id": "a1f73fd8.5e08c",
        "type": "function",
        "z": "c3fa3eae.3c05c",
        "name": "showInit",
        "func": "global.set(\"mode\",0x0000);\nreturn {payload:{system:\"init...\"}};",
        "outputs": 1,
        "noerr": 0,
        "x": 651,
        "y": 434.99998474121094,
        "wires": [
            []
        ]
    },
    {
        "id": "91218d33.f62c9",
        "type": "function",
        "z": "754e4082.e88e1",
        "name": "dispatch_power",
        "func": "var data = context.global._.find(msg.payload.data, function(o) {\n    return o.code === \"all\";\n});\n/**\n * \n **/\nvar computeWeigth = function(dirt,refer2,refer3){\n    if(refer2^refer3 === 1){\n        return (dirt === 0x30 ? 1.2 : 0.8);\n    }else{\n        return 1.0;\n    }\n};\n\nvar computeAdjustPower = function(dirt,list){\n    var adjustPower = dirt === 0x30 ? (list[2].ToUser + list[3].ToUser + list[4].ToUser)/30 : (list[2].ToGrid + list[3].ToGrid + list[4].ToGrid)/30;\n    switch(dirt){\n        case 0x30:\n            var currentPower = global.get(\"currentPower\")||0;\n            var temp = currentPower - adjustPower * computeWeigth(dirt,list[1].Dirt,list[2].Dirt);\n            adjustPower = temp <= 0 ? 0 : temp;\n            break;\n        case 0x33:\n            adjustPower = adjustPower * computeWeigth(dirt,list[1].Dirt,list[2].Dirt);\n            break;\n        default:\n            adjustPower = 0;\n            break;\n    }\n    return adjustPower;\n};\n/**\n * \n **/\n\nif(data){\n    var dataList = global.get(\"data\")||[];\n    dataList.push(data.data);\n    if(dataList.length === 5){\n        var currentPower = global.get(\"currentPower\") || 0;\n        var dirt = dataList[2].Dirt + dataList[3].Dirt + dataList[4].Dirt;\n        var adjustPower = computeAdjustPower(dirt,dataList);\n        global.set(\"data\",[]);\n    }else{\n        global.set(\"data\",dataList);\n    }\n    return {payload:adjustPower||null};\n}",
        "outputs": 1,
        "noerr": 0,
        "x": 343,
        "y": 152,
        "wires": [
            []
        ]
    },
    {
        "id": "d957e3c6.3b682",
        "type": "function",
        "z": "c3fa3eae.3c05c",
        "name": "prehandle",
        "func": "const CNT_HEAD_LEN = 29;\nconst CNT_DATA_LEN_INDEX = 27;\nconst CNT_CRC_LEN = 2;\n\nvar buf = global.get(\"buf\") || [];\n\n/**\n * [packageParser description]\n * @param  {[type]} msg [description]\n * @return {[type]}     [description]\n */\nvar packageParser = function (msg) {\n    var packLen = msg.payload.length;\n    var cursor = 0;\n    while (packLen >= CNT_HEAD_LEN) {\n        var len = msg.payload.slice(cursor, cursor + CNT_HEAD_LEN).readUInt16BE(CNT_DATA_LEN_INDEX) + CNT_CRC_LEN + CNT_HEAD_LEN;\n        if (packLen >= len) {\n            //console.log(msg.payload.slice(cursor, cursor + len));\n            node.send({payload:msg.payload.slice(cursor, cursor + len)});\n            packLen -= len;\n            cursor += len;\n        } else {\n            buf.push(msg.payload.slice(cursor, msg.payload.length));\n            packLen = 0; \n        }\n    }\n    buf.push(msg.payload.slice(cursor, msg.payload.length));\n};\n/**\n * [prehandle description]\n * @param  {[type]} msg [description]\n * @return {[type]}     [description]\n */\nvar prehandle = function (msg) {\n    if (msg.payload) {\n        if (msg.payload[0] === 0x52 && msg.payload[1] === 0x46) {\n            if (msg.payload.length < CNT_HEAD_LEN) {\n                buf.push(msg.payload);\n            } else {\n                packageParser(msg);\n            }\n        } else {\n            if (buf.length !== 0) {\n                msg.payload = Buffer.concat([buf[0], msg.payload]);\n                buf = [];\n                packageParser(msg);\n            } else {\n                node.warn(\"invalid package\");\n                //console.log(\"invalid package!\");\n            }\n        }\n    }\n};\n\nprehandle(msg);\nglobal.set(\"buf\",buf);",
        "outputs": 1,
        "noerr": 0,
        "x": 238,
        "y": 111,
        "wires": [
            [
                "dc517e85.23ae8"
            ]
        ]
    },
    {
        "id": "eb9158dc.640b58",
        "type": "function",
        "z": "c3fa3eae.3c05c",
        "name": "mockQueryConf",
        "func": "var crc = context.global.crc;\n\n/*\n \n */\nvar HEAD = context.global.Struct()\n    .word8Ube('protocolType', 1, 'hex')\n    .word8Ube('terminalType', 1, 'hex')\n    .word8Ube('seq')\n    .word8Ube('ver')\n    .word16Ube('terminalCode')\n    .chars('src', 10, 'hex')\n    .chars('dst', 10, 'hex')\n    .word8Ube('funcCode')\n    .word16Ube('length');\n\nvar OPER = context.global.Struct()\n    .word16Ube('code')\n    .word16Ube('len')\n    .word16Ube('status')\n    .word32Ube('Vt')\n    .word32Ube('Ic')\n    .word32Ube('Pt')\n    .word32Ube('Tp')\n    .word32Ube('saved')\n    .word32Ube('used');\n\nvar SN = context.global.Struct()\n    .word16Ube('code')\n    .word16Ube('len')\n    .chars('SN', 10, 'hex');\n\nvar TIME = context.global.Struct()\n    .word16Ube('code')\n    .word16Ube('len')\n    .chars('time', 7, 'hex');\n\nvar ALARM = context.global.Struct()\n    .word16Ube('code')\n    .word16Ube('len')\n    .word32Ube('Tp')\n    .word32Ube('Vt')\n    .word32Ube('Ic')\n    .word32Ube('Pt');\n\nvar ABSTRACT = context.global.Struct()\n    .word16Ube('code')\n    .word16Ube('len')\n    .word16Ube('data');\n\nvar ACK = context.global.Struct()\n    .word8Ube('result');\n\nvar CRC16 = context.global.Struct()\n    .word16Ube('crc16');\n\nvar create = function(name) {\n    var buf = name.allocate().buffer();\n    for (var i = 0; i < buf.length; i++) {\n        buf[i] = 0;\n    }\n    return buf;\n};\n\n/*\n \n */\nvar codes = msg.payload.data.codes;\nvar mockOperStatus = function() {\n    oper = create(OPER);\n    OPER.set('code',0x0000);\n    OPER.set('len',26);\n    OPER.set('status',global.get(\"mode\"));\n    OPER.set('Vt',global.get(\"Vt\"));\n    if(global.get(\"mode\") === 0x0004){\n        OPER.set('Ic',0);\n    }else{\n        OPER.set('Ic',global.get(\"Pt\")/2200);\n    }\n    if(global.get(\"mode\") === 0x0004){\n        OPER.set('Pt',0);\n    }else{\n        OPER.set('Pt',global.get(\"Pt\"));\n    }\n    OPER.set('Tp',879+ context.global._._.random(0, 10));\n    OPER.set('saved',global.get(\"Saved\")+ context.global._._.random(0, 10));\n    OPER.set('used',global.get(\"Used\")+ context.global._._.random(0, 10));\n    return oper;\n};\nvar mockAlarm = function() {\n    alarm = create(ALARM);\n    ALARM.set('code',0x0013);\n    ALARM.set('len',16);\n\n    ALARM.set('Tp',0x000004B0); //-20.5~120\n    ALARM.set('Vt',0x07080A28); //180~260\n    ALARM.set('Ic',0x00000087); //0~14.5\n    ALARM.set('Pt',0x000088B8); //0~3500\n    return alarm;\n};\nvar mockTime = function() {\n    time = create(TIME);\n    TIME.set('code',0x0012);\n    TIME.set('len',7);\n    TIME.set('time',\"10091E05014401\");\n    return time;\n};\nvar mockSN = function(){\n    sn = create(SN);\n    SN.set('code',0x0011);\n    SN.set('len',10);\n    SN.set('SN',msg.payload.dst);\n    return sn;\n};\nvar mockAstract = function(code,value){\n    abstract = create(ABSTRACT);\n    ABSTRACT.set('code',code);\n    ABSTRACT.set('len',2);\n    ABSTRACT.set('data',value);\n    return abstract;\n};\nvar dataType = Buffer(0);\ncontext.global._.forEach(codes, function(e) {\n    switch (e) {\n        // oper\n        case 0x0000:\n            dataType = Buffer.concat([dataType, mockOperStatus()]);\n            break;\n            // sn\n        case 0x0011:\n            dataType = Buffer.concat([dataType, mockSN()]);\n            break;\n            // time\n        case 0x0012:\n            dataType = Buffer.concat([dataType, mockTime()]);\n            break;\n            // alarm\n        case 0x0013:\n            dataType = Buffer.concat([dataType, mockAlarm()]);\n            break;\n            // mactch algo\n        case 0x0021:\n            dataType = Buffer.concat([dataType, mockAstract(e,0x0000)]);\n            break;\n            // match factor\n        case 0x0022:\n            dataType = Buffer.concat([dataType, mockAstract(e,0x1388)]);\n            break;\n            // mactch error\n        case 0x0023:\n            dataType = Buffer.concat([dataType, mockAstract(e,0x0014)]);\n            break;\n            // match timeout\n        case 0x0024:\n            dataType = Buffer.concat([dataType, mockAstract(e,0x001E)]);\n            break;\n            // match prevalue\n        case 0x0025:\n            dataType = Buffer.concat([dataType, mockAstract(e,0x00C8)]);\n            break;\n            // dispatch window\n        case 0x0031:\n            dataType = Buffer.concat([dataType, mockAstract(e,0x0005)]);\n            break;\n            // dispatch freq\n        case 0x0032:\n            dataType = Buffer.concat([dataType, mockAstract(e,0x001E)]);\n            break;\n            // dispatch algo\n        case 0x0033:\n            dataType = Buffer.concat([dataType, mockAstract(e,0x0000)]);\n            break;\n            // dispatch verify algo\n        case 0x0034:\n            dataType = Buffer.concat([dataType, mockAstract(e,0x0000)]);\n            break;\n            // dispatch factor\n        case 0x0035:\n            dataType = Buffer.concat([dataType, mockAstract(e,0x000A)]);\n            break;\n        default:\n            break;\n\n    }\n});\n/*\n\n */\nvar head = create(HEAD);\nHEAD.set('protocolType', 0x52);\nHEAD.set('terminalType', 0x46);\nHEAD.set('seq', msg.payload.seq);\nHEAD.set('ver', 0x01);\nHEAD.set('terminalCode', 0x00B0);\nHEAD.set('src', msg.payload.src);\nHEAD.set('dst', msg.payload.dst);\nHEAD.set('funcCode', msg.payload.funcCode);\nHEAD.set('length', dataType.length +1);\n\nvar ACKData = create(ACK);\nACK.set('result', 0x00);\n\nvar crcData = create(CRC16);\nCRC16.set('crc16', crc.crc16modbus(Buffer.concat([head, ACKData, dataType])));\nvar data = Buffer.concat([head, ACKData, dataType, crcData]);\nvar sendMsg = {\n    payload: data\n};\nreturn sendMsg;",
        "outputs": 1,
        "noerr": 0,
        "x": 911,
        "y": 297,
        "wires": [
            [
                "dd9a3a06.2265c8"
            ]
        ]
    },
    {
        "id": "26c76491.e42d3c",
        "type": "function",
        "z": "c3fa3eae.3c05c",
        "name": "mockSetConf",
        "func": "var crc = context.global.crc;\n\n/*\n \n */\nvar HEAD = context.global.Struct()\n    .word8Ube('protocolType', 1, 'hex')\n    .word8Ube('terminalType', 1, 'hex')\n    .word8Ube('seq')\n    .word8Ube('ver')\n    .word16Ube('terminalCode')\n    .chars('src', 10, 'hex')\n    .chars('dst', 10, 'hex')\n    .word8Ube('funcCode')\n    .word16Ube('length');\n\nvar RESPONS = context.global.Struct()\n    .word16Ube('code')\n    .word8Ube('status');\n\nvar CRC16 = context.global.Struct()\n    .word16Ube('crc16');\n\nvar mockRespons = function(code){\n    respons = create(RESPONS);\n    RESPONS.set('code',code);\n    RESPONS.set('status',0x00);\n    return respons;\n};\n\nvar mockResponsInvalid = function(code){\n    respons = create(RESPONS);\n    RESPONS.set('code',code);\n    RESPONS.set('status',0x02);\n    return respons;\n};\n\nvar create = function(name) {\n    var buf = name.allocate().buffer();\n    for (var i = 0; i < buf.length; i++) {\n        buf[i] = 0;\n    }\n    return buf;\n};\n/*\n \n */\nvar codes = msg.payload.data.codes;\n\nvar dataType = Buffer(0);\ncontext.global._.forEach(codes, function(e) {\n    switch (e) {\n        // status\n        case 0x0001:\n            dataType = Buffer.concat([dataType, mockRespons(e)]);\n            break;\n            // saved\n        case 0x0002:\n            dataType = Buffer.concat([dataType, mockRespons(e)]);\n            break;\n            // used\n        case 0x0003:\n            dataType = Buffer.concat([dataType, mockRespons(e)]);\n            break;\n            // sn\n        case 0x0011:\n            dataType = Buffer.concat([dataType, mockRespons(e)]);\n            break;\n            // time\n        case 0x0012:\n            dataType = Buffer.concat([dataType, mockRespons(e)]);\n            break;\n            // alarm\n        case 0x0013:\n            dataType = Buffer.concat([dataType, mockRespons(e)]);\n            break;\n            // mactch algo\n        case 0x0021:\n            dataType = Buffer.concat([dataType, mockRespons(e)]);\n            break;\n            // match factor\n        case 0x0022:\n            dataType = Buffer.concat([dataType, mockRespons(e)]);\n            break;\n            // mactch error\n        case 0x0023:\n            dataType = Buffer.concat([dataType, mockRespons(e)]);\n            break;\n            // match timeout\n        case 0x0024:\n            dataType = Buffer.concat([dataType, mockRespons(e)]);\n            break;\n            // match prevalue\n        case 0x0025:\n            dataType = Buffer.concat([dataType, mockRespons(e)]);\n            break;\n            // dispatch window\n        case 0x0031:\n            dataType = Buffer.concat([dataType, mockRespons(e)]);\n            break;\n            // dispatch freq\n        case 0x0032:\n            dataType = Buffer.concat([dataType, mockRespons(e)]);\n            break;\n            // dispatch algo\n        case 0x0033:\n            dataType = Buffer.concat([dataType, mockRespons(e)]);\n            break;\n            // dispatch verify algo\n        case 0x0034:\n            dataType = Buffer.concat([dataType, mockRespons(e)]);\n            break;\n            // dispatch factor\n        case 0x0035:\n            dataType = Buffer.concat([dataType, mockRespons(e)]);\n            break;\n        default:\n            dataType = Buffer.concat([dataType, mockResponsInvalid(e)]);\n            break;\n\n    }\n});\n\n/*\n\n */\nvar head = create(HEAD);\nHEAD.set('protocolType', 0x52);\nHEAD.set('terminalType', 0x46);\nHEAD.set('seq', msg.payload.seq);\nHEAD.set('ver', 0x01);\nHEAD.set('terminalCode', 0x00B0);\nHEAD.set('src', msg.payload.src);\nHEAD.set('dst', msg.payload.dst);\nHEAD.set('funcCode', msg.payload.funcCode);\nHEAD.set('length', codes.length * 3);\n\nvar crcData = create(CRC16);\nCRC16.set('crc16', crc.crc16modbus(Buffer.concat([head, dataType])));\nvar data = Buffer.concat([head, dataType, crcData]);\nvar sendMsg = {\n    payload: data\n};\n\nreturn sendMsg;",
        "outputs": 1,
        "noerr": 0,
        "x": 913,
        "y": 335,
        "wires": [
            [
                "dd9a3a06.2265c8"
            ]
        ]
    },
    {
        "id": "7004d322.d3a3dc",
        "type": "function",
        "z": "c3fa3eae.3c05c",
        "name": "searchACK",
        "func": "var crc = context.global.crc;\n\n/*\n \n */\nvar HEAD = context.global.Struct()\n    .word8Ube('protocolType', 1, 'hex')\n    .word8Ube('terminalType', 1, 'hex')\n    .word8Ube('seq')\n    .word8Ube('ver')\n    .word16Ube('terminalCode')\n    .chars('src', 10, 'hex')\n    .chars('dst', 10, 'hex')\n    .word8Ube('funcCode')\n    .word16Ube('length');\n    \nvar CRC16 = context.global.Struct()\n    .word16Ube('crc16');\n\nvar create = function(name) {\n    var buf = name.allocate().buffer();\n    for (var i = 0; i < buf.length; i++) {\n        buf[i] = 0;\n    }\n    return buf;\n};\nvar head = create(HEAD);\nHEAD.set('protocolType', 0x52);\nHEAD.set('terminalType', 0x46);\nHEAD.set('seq', msg.payload.seq);\nHEAD.set('ver', 0x01);\nHEAD.set('terminalCode', 0x00B0);\nHEAD.set('src', msg.payload.src);\nHEAD.set('dst', global.get(\"dst\"));\nHEAD.set('funcCode', msg.payload.funcCode);\nHEAD.set('length', 0);\n\nvar crcData = create(CRC16);\nCRC16.set('crc16', crc.crc16modbus(Buffer.concat([head])));\nvar data = Buffer.concat([head, crcData]);\nvar sendMsg = {\n    payload: data\n};\nreturn sendMsg;",
        "outputs": 1,
        "noerr": 0,
        "x": 899,
        "y": 410,
        "wires": [
            [
                "dd9a3a06.2265c8"
            ]
        ]
    },
    {
        "id": "37c7af94.8fc1",
        "type": "ui_toast",
        "z": "c3fa3eae.3c05c",
        "name": "",
        "x": 446,
        "y": 950,
        "wires": []
    },
    {
        "id": "11b505ed.509c0a",
        "type": "function",
        "z": "c3fa3eae.3c05c",
        "name": "tipPair",
        "func": "\nreturn {payload:\"在Slave模式中不支持Pair操作！\"};",
        "outputs": 1,
        "noerr": 0,
        "x": 247,
        "y": 952,
        "wires": [
            [
                "37c7af94.8fc1"
            ]
        ]
    },
    {
        "id": "cfbed331.545e5",
        "type": "function",
        "z": "52754d49.cf1c24",
        "name": "showLCD",
        "func": "var wpi = context.global.wpi;\nvar eol = context.global.os.EOL;\n/**\n * PINs\n */\nconst PIN_CS    = 8;  //CE0\nconst PIN_RW    = 10; //MOSI\nconst PIN_CLK   = 11; //SCLK\nconst PIN_RST   = 25; //GPIO25\n/**\n * Timeing sequence\n */\nconst TS_SYNC   = 0b11111000;\nconst TS_RW     = 0b00000100;\nconst TS_CS     = 0b00000010;\n/**\n * cmd\n */\nconst CMD_FSET  = 0b00100000;\nconst CMD_8BIT  = 0b00010000;\nconst CMD_DCONT = 0b00001000;\nconst CMD_DON   = 0b00000100;\nconst CMD_CON   = 0b00000010;\nconst CMD_BON   = 0b00000001;\nconst CMD_ENMOD = 0b00000100;\nconst CMD_INC   = 0b00000010;\nconst CMD_CLR   = 0b00000001;\n\n/**\n * [shiftOutH description]\n * @param  {[type]} dPin  [description]\n * @param  {[type]} cPin  [description]\n * @param  {[type]} order [description]\n * @param  {[type]} value [description]\n * @return {[type]}       [description]\n */\nvar shiftOutH = function(dPin,cPin,order,value){\n    wpi.digitalWrite(cPin,wpi.HIGH);\n    if(order == wpi.MSBFIRST){\n        for (var i = 7; i >= 0; i--) {\n            var d1 = (value & (1 << i)) > 0 ? wpi.HIGH : wpi.LOW;\n            wpi.digitalWrite(dPin,d1);\n            wpi.digitalWrite(cPin,wpi.LOW);\n            wpi.digitalWrite(cPin,wpi.HIGH);\n        }\n    }else{\n        for (var j = 0; j < 8; j++) {\n            var d2 = (value & (1 << j)) > 0 ? wpi.HIGH : wpi.LOW;\n            wpi.digitalWrite(dPin, d2);\n            wpi.digitalWrite(cPin,wpi.LOW);\n            wpi.digitalWrite(cPin.wpi.HIGH);\n        }\n    }\n}\n/**\n * [cmdLCD description\n ]\n * @param  {[type]} cmd [description]\n * @return {[type]}     [description]\n */\nvar cmdLCD = function(cmd){\n    wpi.digitalWrite(PIN_CS,wpi.HIGH);\n    shiftOutH(PIN_RW, PIN_CLK, wpi.MSBFIRST, TS_SYNC);\n    shiftOutH(PIN_RW, PIN_CLK, wpi.MSBFIRST, cmd & 0xf0);\n    shiftOutH(PIN_RW, PIN_CLK, wpi.MSBFIRST, (cmd << 4));\n    wpi.digitalWrite(PIN_CS, wpi.LOW);\n    wpi.delayMicroseconds(100);\n};\n/**\n * [dataLCD description]\n * @param  {[type]} data [description]\n * @return {[type]}      [description]\n */\nvar dataLCD = function(data){\n    wpi.digitalWrite(PIN_CS,wpi.HIGH);\n    shiftOutH(PIN_RW, PIN_CLK, wpi.MSBFIRST, TS_SYNC | TS_CS);\n    shiftOutH(PIN_RW, PIN_CLK, wpi.MSBFIRST, data & 0xf0);\n    shiftOutH(PIN_RW, PIN_CLK, wpi.MSBFIRST, (data << 4));\n    wpi.digitalWrite(PIN_CS, wpi.LOW);\n    wpi.delayMicroseconds(100);\n};\n/**\n * [sendStr description]\n * @param  {[type]} text [description]\n * @return {[type]}      [description]\n */\nvar sendStr = function(text){\n    var chars = new Buffer(text);\n    chars.forEach(function(o){\n        dataLCD(o);\n    });\n};\n\nvar gotoxy = function(row,col){\n    switch(row){\n        case 1: cmdLCD(0x80 + col);break;\n        case 2: cmdLCD(0x90 + col);break;        \n    }\n};\n\n/**\n * [clearLCD description]\n * @return {[type]} [description]\n */\nvar clearLCD = function(){\n    cmdLCD(CMD_CLR);\n    wpi.delay(10);\n};\n/**\n * [resetLCD description]\n * @return {[type]} [description]\n */\nvar resetLCD = function(){\n    wpi.digitalWrite(PIN_RST,wpi.LOW);\n    wpi.digitalWrite(PIN_RST,wpi.HIGH);\n\n    cmdLCD(CMD_FSET | CMD_8BIT);\n    wpi.delayMicroseconds(100);\n    cmdLCD(CMD_FSET | CMD_8BIT);\n    wpi.delayMicroseconds(40);\n\n    cmdLCD(CMD_DCONT | CMD_DON);\n    wpi.delayMicroseconds(100);\n    clearLCD();\n\n    cmdLCD(CMD_ENMOD | CMD_INC);\n};\n/**\n * [initGPIO description]\n * @return {[type]} [description]\n */\nvar initGPIO = function(){\n    wpi.pinMode(PIN_CS,wpi.OUTPUT);\n    wpi.digitalWrite(PIN_CS,wpi.LOW);\n    wpi.delay(100);\n    wpi.pinMode(PIN_RW, wpi.OUTPUT);   //MOSI\n    wpi.digitalWrite(PIN_RW, wpi.LOW);\n    wpi.delay(100);\n    wpi.pinMode(PIN_CLK, wpi.OUTPUT);   //SCLK\n    wpi.digitalWrite(PIN_CLK, wpi.HIGH);\n    wpi.delay(100);\n    wpi.pinMode(PIN_RST, wpi.OUTPUT);   //RST\n    wpi.digitalWrite(PIN_RST, wpi.HIGH);\n    wpi.delay(100);\n};\n/**\n * [initLCD description]\n * @return {[type]} [description]\n */\nvar initLCD = function(){\n    wpi.delay(40);\n    resetLCD();\n};\n/**\n * [parseText description]\n * @return {[type]} [description]\n */\nvar showText = function(){\n    var text = null;\n    if(typeof msg.payload.status !== 'undefined' && msg.payload.status){\n        text = msg.payload.status.split(eol);\n        msg.payload.status = context.global._.join(text,' ');\n    }else if(typeof msg.payload.network !== 'undefined' && msg.payload.network){\n        text = msg.payload.network.split(eol);\n        msg.payload.network = context.global._.join(text,' ');\n    }else if(typeof msg.payload.display !== 'undefined' && msg.payload.display){\n        text = msg.payload.display.split(eol);\n        msg.payload.display = context.global._.join(text,' ');\n    }else{\n        text = msg.payload.system.split(eol);\n        msg.payload.system = context.global._.join(text,' ');\n    }\n    if (text !== null) {\n        var row = 0;\n        var col = 0;\n        text.forEach(function(o){\n            gotoxy(++row,col);\n            sendStr(o);\n        });\n    }\n};\n\n\n/*****************************************************/\n\nif(wpi.setup('gpio') === -1){\n    node.error('setup gpio fail',msg);\n}else{\n    initGPIO();\n    initLCD();    \n    showText();    \n    return msg;    \n}\n",
        "outputs": 1,
        "noerr": 0,
        "x": 446,
        "y": 215,
        "wires": [
            [
                "82307904.9245a8"
            ]
        ]
    },
    {
        "id": "82307904.9245a8",
        "type": "debug",
        "z": "52754d49.cf1c24",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "false",
        "x": 671,
        "y": 309,
        "wires": []
    },
    {
        "id": "46f1a8e3.5b3278",
        "type": "function",
        "z": "653df438.cea10c",
        "name": "led_and_button",
        "func": "// led\nvar ledManual = new context.global.Gpio(global.get(\"PIN_LED_MANUAL\"),'out');\nvar ledAuto = new context.global.Gpio(global.get(\"PIN_LED_AUTO\"),'out');\nvar ledComm = new context.global.Gpio(global.get(\"PIN_LED_COMM\"),'out');\n//button\nvar btnManual = new context.global.Gpio(global.get(\"PIN_BTN_MANUAL\"),'in','both');\nvar btnAuto = new context.global.Gpio(global.get(\"PIN_BTN_AUTO\"),'in','both');\nvar btnOff = new context.global.Gpio(global.get(\"PIN_BTN_OFF\"),'in','both');\nvar btnDisplay = new context.global.Gpio(global.get(\"PIN_BTN_DISPLAY\"),'in','both');\nvar iv = null;\n\nnode.on('close', function() {\n    ledManual.unexport();\n    ledAuto.unexport();\n    ledComm.unexport();\n\n    btnDisplay.unexport();\n    btnOff.unexport();\n    btnManual.unexport();\n    btnAuto.unexport();\n});\n\n// auto\nbtnAuto.watch(function (err, value) {\n  if (err) {\n    node.error(err,msg);\n  }\n  iv = setInterval(function(){\n    if(global.get(\"mode\") === 'auto'){\n        ledAuto.writeSync(ledAuto.readSync()^1);\n        ledManual.writeSync(0);\n        ledComm.writeSync(ledComm.readSync()^1);      \n    }\n  }, 200);\n});\n\n// manual\nbtnManual.watch(function (err, value) {\n  if (err) {\n    node.error(err,msg);\n  }\n  setTimeout(function(){\n    if(global.get(\"mode\") === 'manual'){\n        clearInterval(iv);\n        ledManual.writeSync(1);\n        ledAuto.writeSync(0);\n        ledComm.writeSync(0);      \n    }\n  }, 500);  \n});\n\n// off\nbtnOff.watch(function (err, value) {\n  if (err) {\n    node.error(err,msg);\n  }\n  setTimeout(function(){\n    if(global.get(\"mode\") === 'off' || global.get(\"mode\") === 'off-auto'){\n        clearInterval(iv);\n        ledManual.writeSync(1);\n        ledAuto.writeSync(0);\n        ledComm.writeSync(0);      \n    }\n  }, 500);  \n});\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 415,
        "y": 142,
        "wires": [
            []
        ]
    },
    {
        "id": "ace299e7.8cf378",
        "type": "function",
        "z": "22b837c5.dd47c8",
        "name": "updateSeq",
        "func": "var seq = global.get(\"seq\") === 255 ? 1 : global.get(\"seq\") + 1;\nglobal.set(\"seq\",seq);\nreturn msg;",
        "outputs": "1",
        "noerr": 0,
        "x": 496,
        "y": 259,
        "wires": [
            []
        ]
    },
    {
        "id": "a6f8b66b.fdbf18",
        "type": "debug",
        "z": "c3fa3eae.3c05c",
        "name": "Recv:Debug[parsePackage]",
        "active": true,
        "console": "false",
        "complete": "payload",
        "x": 747,
        "y": 65,
        "wires": []
    },
    {
        "id": "93411dad.8e506",
        "type": "debug",
        "z": "c3fa3eae.3c05c",
        "name": "Debug[Ignor]",
        "active": true,
        "console": "false",
        "complete": "payload",
        "x": 362,
        "y": 357,
        "wires": []
    },
    {
        "id": "efe3e864.5869c8",
        "type": "json",
        "z": "b57bffd1.4a84",
        "name": "",
        "x": 1449,
        "y": 479,
        "wires": [
            [
                "4f63ae99.b09c5"
            ]
        ]
    },
    {
        "id": "ed94419c.df8",
        "type": "switch",
        "z": "c3fa3eae.3c05c",
        "name": "switchMode",
        "property": "mode",
        "propertyType": "global",
        "rules": [
            {
                "t": "eq",
                "v": "1",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "4",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "2",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "outputs": 3,
        "x": 206,
        "y": 551,
        "wires": [
            [
                "2dfbe204.d2041e"
            ],
            [
                "28b5bd05.d74a42"
            ],
            [
                "a85859df.57a7a8"
            ]
        ]
    },
    {
        "id": "bbe7cb.eb306838",
        "type": "function",
        "z": "c3fa3eae.3c05c",
        "name": "setSetFail",
        "func": "var crc = context.global.crc;\n\nvar HEAD = context.global.Struct()\n    .word8Ube('protocolType', 1, 'hex')\n    .word8Ube('terminalType', 1, 'hex')\n    .word8Ube('seq')\n    .word8Ube('ver')\n    .word16Ube('terminalCode')\n    .chars('src', 10, 'hex')\n    .chars('dst', 10, 'hex')\n    .word8Ube('funcCode')\n    .word16Ube('length');\n\nvar ACK = context.global.Struct()\n    .word16Ube('code')\n    .word8Ube('result');\n\nvar CRC16 = context.global.Struct()\n    .word16Ube('crc16');\n\nvar create = function(name) {\n    var buf = name.allocate().buffer();\n    for (var i = 0; i < buf.length; i++) {\n        buf[i] = 0;\n    }\n    return buf;\n};\n\nvar head = create(HEAD);\nHEAD.set('protocolType', 0x52);\nHEAD.set('terminalType', 0x46);\nHEAD.set('seq', msg.payload.seq);\nHEAD.set('ver', 0x01);\nHEAD.set('terminalCode', 0x00B0);\nHEAD.set('src', msg.payload.src);\nHEAD.set('dst', msg.payload.dst);\nHEAD.set('funcCode', msg.payload.funcCode);\nHEAD.set('length', 0x03);\n//\nvar ACKData = create(ACK);\nACK.set('code',msg.payload.data.codes);\nACK.set('result', msg.payload.data.code);\n//\nvar crcData = create(CRC16);\nCRC16.set('crc16', crc.crc16modbus(Buffer.concat([head, ACKData])));\nvar data = Buffer.concat([head, ACKData, crcData]);\nvar sendMsg = {\n    payload: data\n};\nreturn sendMsg;",
        "outputs": 1,
        "noerr": 0,
        "x": 896,
        "y": 372,
        "wires": [
            [
                "dd9a3a06.2265c8"
            ]
        ]
    },
    {
        "id": "e4c7e0e2.954f1",
        "type": "function",
        "z": "c3fa3eae.3c05c",
        "name": "tipNetwork",
        "func": "\nreturn {payload:{network:\"connected\"}}",
        "outputs": 1,
        "noerr": 0,
        "x": 1126.0296936035156,
        "y": 481.67108154296875,
        "wires": [
            [
                "c8dda30e.37226"
            ]
        ]
    },
    {
        "id": "ddbe04a6.36de58",
        "type": "ui_text",
        "z": "c3fa3eae.3c05c",
        "group": "a0c4e15a.3e8dd",
        "order": 1,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "SN",
        "format": "{{msg.payload.SN}}",
        "layout": "row-spread",
        "x": 937.0198059082031,
        "y": 961.434268951416,
        "wires": []
    },
    {
        "id": "2e916df0.fd6fb2",
        "type": "debug",
        "z": "c3fa3eae.3c05c",
        "name": "Send:Debug[setPairACK]",
        "active": true,
        "console": "false",
        "complete": "payload",
        "x": 1258,
        "y": 140,
        "wires": []
    },
    {
        "id": "15bf572.3a8c4a9",
        "type": "debug",
        "z": "c3fa3eae.3c05c",
        "name": "Send:Debug[exitPairACK]",
        "active": true,
        "console": "false",
        "complete": "payload",
        "x": 1332,
        "y": 204,
        "wires": []
    },
    {
        "id": "6868c460.a23ddc",
        "type": "ui_button",
        "z": "1a72b724.e42fd9",
        "name": "",
        "group": "95e82f03.31a25",
        "order": 0,
        "width": 0,
        "height": 0,
        "label": "button",
        "color": "",
        "bgcolor": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "",
        "x": 410,
        "y": 400,
        "wires": [
            []
        ]
    },
    {
        "id": "c57ae57b.4171f8",
        "type": "mqtt out",
        "z": "5a6aac3a.109e78",
        "name": "",
        "topic": "message",
        "qos": "0",
        "retain": "",
        "broker": "32b25bfb.21dbfc",
        "x": 1720,
        "y": 167,
        "wires": []
    },
    {
        "id": "45439e70.0618f8",
        "type": "mqtt in",
        "z": "5a6aac3a.109e78",
        "name": "request",
        "topic": "5c2624b2-aad3-42af-bc59-9aedbbd2c84b",
        "qos": "2",
        "broker": "32b25bfb.21dbfc",
        "x": 115,
        "y": 233.14999389648438,
        "wires": [
            [
                "b9507827.ecddb"
            ]
        ]
    },
    {
        "id": "b9507827.ecddb",
        "type": "function",
        "z": "5a6aac3a.109e78",
        "name": "ParseMessage",
        "func": "var request = JSON.parse(msg.payload);\nvar msg = request.data\ncontext.global.set(\"request_msg\",msg);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 264,
        "y": 233.32000732421875,
        "wires": [
            [
                "8ebafeb0.1a404",
                "993feec1.5210f"
            ]
        ]
    },
    {
        "id": "8ebafeb0.1a404",
        "type": "switch",
        "z": "5a6aac3a.109e78",
        "name": "",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "RPC_CALL",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "RPC_BACK",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 413,
        "y": 233.32000732421875,
        "wires": [
            [
                "3466c454.8ebc24"
            ],
            [
                "c2238f69.e0301"
            ]
        ]
    },
    {
        "id": "3466c454.8ebc24",
        "type": "switch",
        "z": "5a6aac3a.109e78",
        "name": "RPC_CALL",
        "property": "payload.cmdCode",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0000",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "000a",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 584,
        "y": 152.3199920654297,
        "wires": [
            [
                "81474fb9.abbde"
            ],
            [
                "923a3ff6.6265a"
            ]
        ]
    },
    {
        "id": "c2238f69.e0301",
        "type": "function",
        "z": "5a6aac3a.109e78",
        "name": "RPC_BACK",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 590,
        "y": 320,
        "wires": [
            []
        ]
    },
    {
        "id": "81474fb9.abbde",
        "type": "function",
        "z": "5a6aac3a.109e78",
        "name": "UPDATE_CONFIG",
        "func": "var cmds = msg.payload.parameters.cmds;\nvar cmdsString = \"\";\ncmds.forEach(function(item,index){\n    cmdsString += \"&&\"+item;\n});\n\nreturn {payload:cmdsString};",
        "outputs": 1,
        "noerr": 0,
        "x": 770,
        "y": 120,
        "wires": [
            [
                "4ca5ae43.2e7bc",
                "1d8d2139.6c554f"
            ]
        ]
    },
    {
        "id": "4ca5ae43.2e7bc",
        "type": "exec",
        "z": "5a6aac3a.109e78",
        "command": "cd /home/pi/.node-red",
        "addpay": true,
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "oldrc": false,
        "name": "exec",
        "x": 940,
        "y": 152,
        "wires": [
            [
                "b0f263d2.5acad"
            ],
            [
                "b11f65bd.f625d8"
            ],
            [
                "840b35aa.cb7da8"
            ]
        ]
    },
    {
        "id": "b0f263d2.5acad",
        "type": "function",
        "z": "5a6aac3a.109e78",
        "name": "handle_success",
        "func": "\nreturn {payload:{\"result\":msg.payload}};",
        "outputs": 1,
        "noerr": 0,
        "x": 1120,
        "y": 82,
        "wires": [
            [
                "840b35aa.cb7da8"
            ]
        ]
    },
    {
        "id": "b11f65bd.f625d8",
        "type": "function",
        "z": "5a6aac3a.109e78",
        "name": "handle_failed",
        "func": "return {payload:{\"error\":msg.payload}};",
        "outputs": 1,
        "noerr": 0,
        "x": 1112,
        "y": 122,
        "wires": [
            [
                "840b35aa.cb7da8"
            ]
        ]
    },
    {
        "id": "840b35aa.cb7da8",
        "type": "join",
        "z": "5a6aac3a.109e78",
        "name": "Merge",
        "mode": "custom",
        "build": "merged",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "10",
        "count": "2",
        "x": 1290,
        "y": 165,
        "wires": [
            [
                "73f57e19.322004",
                "8c824697.42d188"
            ]
        ]
    },
    {
        "id": "73f57e19.322004",
        "type": "function",
        "z": "5a6aac3a.109e78",
        "name": "ret_mqtt_msg",
        "func": "var result = msg.payload;\nvar requst_msg = context.global.get(\"request_msg\");\nvar retMsg = {\n    payload:{\n         devices:[requst_msg.fromUuid],\n        topic:\"RPC_BACK\",\n        fromUuid: requst_msg.devices[0],\n        callbackId:requst_msg.callbackId,\n        payload:{\n            retCode: 200,\n            description: \"SUCCESS\",\n            data: result\n        }\n    }\n}\nreturn retMsg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1484,
        "y": 166.30999755859375,
        "wires": [
            [
                "c57ae57b.4171f8",
                "2c10e15a.3e484e"
            ]
        ]
    },
    {
        "id": "993feec1.5210f",
        "type": "debug",
        "z": "5a6aac3a.109e78",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "true",
        "x": 366,
        "y": 331.72998046875,
        "wires": []
    },
    {
        "id": "1d8d2139.6c554f",
        "type": "debug",
        "z": "5a6aac3a.109e78",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "true",
        "x": 931,
        "y": 244.72998046875,
        "wires": []
    },
    {
        "id": "8c824697.42d188",
        "type": "debug",
        "z": "5a6aac3a.109e78",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "true",
        "x": 1411,
        "y": 233.72998046875,
        "wires": []
    },
    {
        "id": "2c10e15a.3e484e",
        "type": "debug",
        "z": "5a6aac3a.109e78",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "true",
        "x": 1684,
        "y": 236.72998046875,
        "wires": []
    },
    {
        "id": "ddcb6990.100598",
        "type": "debug",
        "z": "c3fa3eae.3c05c",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "false",
        "x": 100,
        "y": 167,
        "wires": []
    },
    {
        "id": "10b6a509.cb9a2b",
        "type": "file",
        "z": "5a6aac3a.109e78",
        "name": "",
        "filename": "/home/pi/.node-red/etc/route.json",
        "appendNewline": false,
        "createDir": false,
        "overwriteFile": "true",
        "x": 940,
        "y": 480,
        "wires": []
    },
    {
        "id": "923a3ff6.6265a",
        "type": "function",
        "z": "5a6aac3a.109e78",
        "name": "updatePairInfo",
        "func": "global.set(\"src\",null);\n//global.set(\"dst\",msg.payload.dst);\nreturn {payload:{src:null,dst:global.get(\"dst\")}};",
        "outputs": 1,
        "noerr": 0,
        "x": 840,
        "y": 340,
        "wires": [
            [
                "10b6a509.cb9a2b",
                "689d7ff6.1b6f78"
            ]
        ]
    },
    {
        "id": "e2614a79.488a68",
        "type": "ui_button",
        "z": "5a6aac3a.109e78",
        "name": "Reset",
        "group": "a0c4e15a.3e8dd",
        "order": 9,
        "width": "0",
        "height": "0",
        "passthru": false,
        "label": "Reset",
        "color": "red",
        "bgcolor": "",
        "icon": "fa-terminal",
        "payload": "",
        "payloadType": "str",
        "topic": "",
        "x": 550,
        "y": 560,
        "wires": [
            [
                "923a3ff6.6265a"
            ]
        ]
    },
    {
        "id": "689d7ff6.1b6f78",
        "type": "debug",
        "z": "5a6aac3a.109e78",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "true",
        "x": 1070,
        "y": 340,
        "wires": []
    }
]